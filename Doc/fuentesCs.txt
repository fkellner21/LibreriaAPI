***********************************
Archivo: ManejadorJwt.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApi\ManejadorJwt.cs
***********************************

using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using LogicaDeNegocio.Entidades;

namespace WebApi
{
    public class ManejadorJwt
    {
        public static string GenerarToken(Usuario user)
        {
            var tokenHandler = new JwtSecurityTokenHandler();

            //clave secreta, generalmente se incluye en el archivo de configuración
            //Debe ser un vector de bytes 

            var clave = Encoding.ASCII.GetBytes("ZWRpw6fDo28gZW0gY29tcHV0YWRvcmE=");


            //Se incluye un claim (privelegios) para el rol

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Email, user.Email),
                    new Claim(ClaimTypes.Role, user.Discriminator)
                    
                }),
                Expires = DateTime.UtcNow.AddMonths(1),

                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(clave),
                // hmac-codigo de autentificacion sha256-cifrado base64-codificacion
                SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);

            return tokenHandler.WriteToken(token);
        }

    }
}

***********************************
Archivo: WeatherForecast.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApi\WeatherForecast.cs
***********************************
namespace WebApi
{
    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}

***********************************
Archivo: Administrador.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\Administrador.cs
***********************************
using LogicaDeNegocio.Excepciones.Usuario;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class Administrador : Usuario
    {
        public bool ModificaUsuario { get; set; }
        public Administrador() : base() { }
        public Administrador(bool modificaUsuario, string Email, string Password, string Nombre, string Apellido) : base(Email, Password, Nombre, Apellido)
        {
            ModificaUsuario = modificaUsuario;
        }

        public override void Validar()
        {
            base.Validar();
            if (ModificaUsuario == null)
            {
                throw new AdministradorInvalidoException();
            }
        }
        public override void Update(Usuario obj)
        {
            base.Update(obj);
            Administrador admin= obj as Administrador;
            admin.Validar();
            ModificaUsuario=admin.ModificaUsuario;
        }
    }
}

***********************************
Archivo: Articulo.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\Articulo.cs
***********************************
using LogicaDeNegocio.Excepciones.Articulo;
using LogicaDeNegocio.InterfacesDominio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class Articulo: IValidable, IEntity
    {
        public int Id {  get; set; }
        public string Nombre {  get; set; }
        public string Descripcion { get; set; }
        public string Codigo { get; set; }
        public decimal PrecioDeVenta { get; set; }
        public Articulo() {}
        public Articulo(string nombre, string descripcion, string codigo, decimal precioDeVenta)
        {
            Nombre = nombre;
            Descripcion = descripcion;
            Codigo = codigo;
            PrecioDeVenta = precioDeVenta;

        }

        public virtual void Validar()
        {
            ValidarNombre();
            ValidarDescripcion();
            ValidarCodigo();
            ValidarPrecioDeVenta();
        }
        public void ValidarNombre()
        {
            if (string.IsNullOrEmpty(Nombre) )
            {
                throw new NombreNoVacioException();
            }
        }
        public void ValidarDescripcion()
        {
            if(Descripcion.Length < 5)
            {
                throw new DescripcionInvalidoException();
            }
        }
        public void ValidarCodigo()
        {
            if(!EsNumeroDe13Digitos(Codigo))
            {
                throw new CodigoInvalidoException();
            }
        }
        public void ValidarPrecioDeVenta()
        {
            if (PrecioDeVenta==null||PrecioDeVenta < 0)
            {
                throw new PrecioDeVentaInvalidoException();
            }
        }

        static bool EsNumeroDe13Digitos(string numero)
        {
            string patron = @"^\d{13}$";
            // Explicación del patrón:
            // ^: inicio de la cadena
            // \d{12}: exactamente 12 numeros
            // $: final de la cadena

            return Regex.IsMatch(numero, patron);
        }
        public void Update(Articulo obj)
        {
            obj.Validar();
            Nombre=obj.Nombre;
            Descripcion=obj.Descripcion;
            Codigo=obj.Codigo;
            PrecioDeVenta=obj.PrecioDeVenta;
        }
    }
}

***********************************
Archivo: Encargado.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\Encargado.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class Encargado:Usuario
    {
        public Encargado():base() { }
    }
}

***********************************
Archivo: MovimientoDeStock.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\MovimientoDeStock.cs
***********************************
using LogicaDeNegocio.Excepciones.MovimientoDeStock;
using LogicaDeNegocio.InterfacesDominio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class MovimientoDeStock : IValidable, IEntity
    {
        public int Id { get; set; }
        public DateTime fecha { get; set; }
        public Articulo articulo { get; set; }
        public TipoDeMovimiento tipo { get; set; }
        public Usuario ejecutor { get; set; }
        public int cantidad { get; set; }


        public MovimientoDeStock() 
        {
        fecha= DateTime.Now;
        }
        public MovimientoDeStock(int id, Articulo articulo, TipoDeMovimiento tipo, Usuario ejecutor, int cantidad)
        {
            Id = id;
            fecha = DateTime.Now;
            this.articulo = articulo;
            this.tipo = tipo;
            this.ejecutor = ejecutor;
            this.cantidad = cantidad;
        }
        public void Validar()
        {
            if (fecha == null || articulo == null || tipo == null || ejecutor == null || cantidad <= 0)
            {
                throw new MovimientoDeStockInvalidoException();
            }
            if (cantidad > ParametrosGenerales.cantMaxPorMovimiento)
            {
                throw new CantidadInvalidaException();
            }
        }
    }
}

***********************************
Archivo: MovimientoDeStockDto.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\MovimientoDeStockDto.cs
***********************************
using LogicaDeNegocio.InterfacesDominio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class MovimientoDeStockDto
    {
        public int Id { get; set; }
        public DateTime fecha { get; set; }
        public int articuloId { get; set; }
        public int tipoId { get; set; }
        public string ejecutorEmail { get; set; }
        public int cantidad { get; set; }
    }
}

***********************************
Archivo: ParametrosGenerales.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\ParametrosGenerales.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public static class ParametrosGenerales
    {
        public static int cantMaxPorMovimiento { get; set; }
        public static int pageSize { get; set; }

    }
}

***********************************
Archivo: Resultado.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\Resultado.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class Resultado
    {
        public int Anio {  get; set; }
        public int CantidadAnual {  get; set; }
        public List<ResultadoAnual> resultadoAnual {  get; set; }
    }
}

***********************************
Archivo: ResultadoAnual.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\ResultadoAnual.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class ResultadoAnual
    {
        public string Movimiento { get; set; }
        public int Cantidad { get; set; }
    }
}

***********************************
Archivo: TipoDeMovimiento.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\TipoDeMovimiento.cs
***********************************
using LogicaDeNegocio.Excepciones.TipoDeMovimiento;
using LogicaDeNegocio.InterfacesDominio;


namespace LogicaDeNegocio.Entidades
{
    public class TipoDeMovimiento:IValidable,IEntity
    {
        public int Id { get; set; }
        public string Nombre { get; set;}
        public bool aumentaStock { get; set; }

        public TipoDeMovimiento() { }
        public TipoDeMovimiento(int id, string nombre, bool aumentaStock)
        {
            Id = id;
            Nombre = nombre;
            this.aumentaStock = aumentaStock;
        }
        public void Validar()
        {
            if (string.IsNullOrEmpty(Nombre))
            {
                throw new TipoDeMovimientoInvalidoException();
            }
        }

        public void Update(TipoDeMovimiento obj)
        {
            obj.Validar();
            Nombre = obj.Nombre;
            aumentaStock = obj.aumentaStock;
        }
    }
}

***********************************
Archivo: UserDto.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\UserDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class UserDto
    {
        public string Email { get; set; }

        public string Pass { get; set; }

    }
}

***********************************
Archivo: Usuario.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Entidades\Usuario.cs
***********************************
using LogicaDeNegocio.Excepciones.Usuario;
using LogicaDeNegocio.InterfacesDominio;
using System;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Entidades
{
    public class Usuario: IValidable, IEntity
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string PasswordHash { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Discriminator { get; set; }
        public Usuario() { }
        public Usuario(string email, string password, string nombre, string apellido)
        {
            Email = email;
            Password = password;
            Nombre = nombre;
            Apellido = apellido;
        }
        public virtual void Validar()
        {
            ValidarEmail();
            ValidarNombre();
            ValidarApellido();
            ValidarPassword();
        }
        public void ValidarEmail()
        {
            if (!EsCorreoElectronicoValido(Email))
            {
                throw new EmailInvalidoException();
            }
        }
        static bool EsCorreoElectronicoValido(string correo)
        {
            string patron = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
            // Explicación del patrón:
            // ^: inicio de la cadena
            // [a-zA-Z0-9._%+-]+: nombre de usuario; al menos un carácter alfanumérico, punto, guión bajo, porcentaje o signo más o menos
            // @: símbolo de arroba
            // [a-zA-Z0-9.-]+: nombre de dominio; al menos un carácter alfanumérico, punto o guion
            // \.: un punto literal
            // [a-zA-Z]{2,}: extensión de dominio; al menos dos caracteres alfabéticos
            // $: final de la cadena

            return Regex.IsMatch(correo, patron);
        }

        public void ValidarNombre()
        {
            if(!EsNombreApellidoValido(Nombre))
            {
                throw new NombreInvalidoException();
            }
        }
        static bool EsNombreApellidoValido(string texto)
        {
            string patron = @"^[a-zA-Z]+(?:[' -][a-zA-Z]+)*$";
            // Explicación del patrón:
            // ^[a-zA-Z]+: Comienza con uno o más caracteres alfabéticos.
            // (?:[' -][a-zA-Z]+)*: Seguido por cero o más grupos que contienen un apóstrofe,
            // espacio o guión del medio, seguido de uno o más caracteres alfabéticos.
            // $: Termina con la cadena.

            return Regex.IsMatch(texto, patron);
        }
        public void ValidarApellido()
        {
            if (!EsNombreApellidoValido(Apellido))
            {
                throw new ApellidoInvalidoException();
            }
        }
        public void ValidarPassword()
        {
            if (!EsPasswordValida(Password))
            {
                throw new PasswordInvalidoException();
            }
        }
        static bool EsPasswordValida(string pass)
        {
            string patron = @"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[.,;!?])[A-Za-z\d.,;!?@_.\-]{6,}$";
            // Explicación del patrón:
            // ^: inicio de la cadena
            // (?=.*[A-Z]): al menos una letra mayúscula
            // (?=.*[a-z]): al menos una letra minúscula
            // (?=.*\d): al menos un dígito
            // (?=.*[.,;!?]): al menos un carácter de puntuación (punto, punto y coma, coma o signo de admiración de cierre)
            // [A-Za-z\d.,;!?@_.\-]{6,}: caracteres alfabéticos, dígitos y caracteres de puntuación, con un largo mínimo de 6
            // $: final de la cadena

            return Regex.IsMatch(pass, patron);
        }
        public virtual void Update(Usuario obj)
        {
            obj.Validar();
            Password = obj.Password;
            PasswordHash = obj.PasswordHash;
            Nombre = obj.Nombre;
            Apellido = obj.Apellido;
        }
    }
}

***********************************
Archivo: DominioExcpetion.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\DominioExcpetion.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones
{
    public class DominioExcpetion : Exception
    {
        public DominioExcpetion() { }
        public DominioExcpetion(string message) : base(message) { }
    }
}

***********************************
Archivo: IAlta.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IAlta.cs
***********************************

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IAlta<T>
    {
        void Ejecutar(T obj);
    }
}

***********************************
Archivo: IEditar.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IEditar.cs
***********************************

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IEditar <T>
    {
        public void Ejecutar(int id, T obj);
    }
}

***********************************
Archivo: IEliminar.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IEliminar.cs
***********************************

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IEliminar <T>
    {
        public void Ejecutar(int id);
    }
}

***********************************
Archivo: ILogin.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\ILogin.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface ILogin<Usuario>
    {
        public Usuario Ejecutar(string email, string password);
    }
}

***********************************
Archivo: IObtener.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtener.cs
***********************************

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtener <T>
    {
        public T Ejecutar(int id);
    }
}

***********************************
Archivo: IObtenerCantidadPorFecha.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerCantidadPorFecha.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerCantidadPorFecha<T>
    {
        public int Ejecutar(DateTime desde, DateTime hasta);
    }
}

***********************************
Archivo: IObtenerCantidadTotal.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerCantidadTotal.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerCantidadTotal<T>
    {
        public int Ejecutar();
    }
}

***********************************
Archivo: IObtenerCantidadTotalDosFiltros.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerCantidadTotalDosFiltros.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerCantidadTotalDosFiltros<T>
    {
        public int Ejecutar(int primero, int segundo);
    }
}

***********************************
Archivo: IObtenerDeString.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerDeString.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerDeString<T>
    {
        public T Ejecutar(string dato);
    }
}

***********************************
Archivo: IObtenerDosFiltros.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerDosFiltros.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerDosFiltros<T>
    {
        public IEnumerable<T> Ejecutar(int filtro, int segundo, int tercero);
    }
}

***********************************
Archivo: IObtenerFiltroInt.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerFiltroInt.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerFiltroInt<T>
    {
        public IEnumerable<T> Ejecutar(int filtro);

    }
}

***********************************
Archivo: IObtenerFiltroString.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerFiltroString.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerFiltroString<T> 
    {
        public IEnumerable<T> Ejecutar(string filtro);
    }
}

***********************************
Archivo: IObtenerPorFecha.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerPorFecha.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerPorFecha<T>
    {
        public IEnumerable<T> Ejecutar(DateTime desde, DateTime hasta, int page);
    }
}

***********************************
Archivo: IObtenerResumen.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerResumen.cs
***********************************
using LogicaDeNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerResumen
    {
        public IEnumerable<Resultado> Ejecutar();
    }
}

***********************************
Archivo: IObtenerTodos.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerTodos.cs
***********************************

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerTodos <T>
    {
        public IEnumerable<T> Ejecutar();
    }
}

***********************************
Archivo: IObtenerTodosPaginado.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\IntefacesServicios\IObtenerTodosPaginado.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.IntefacesServicios
{
    public interface IObtenerTodosPaginado<T>
    {
        public IEnumerable<T> Ejecutar(int page =0);
    }
}

***********************************
Archivo: IEntity.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\InterfacesDominio\IEntity.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.InterfacesDominio
{
    public interface IEntity
    {
        int Id { get; set; }
    }
}

***********************************
Archivo: IValidable.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\InterfacesDominio\IValidable.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.InterfacesDominio
{
    internal interface IValidable
    {
        public void Validar()
        {
        }
    }
}

***********************************
Archivo: IRepositorioArticulo.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\InterfacesRepositorio\IRepositorioArticulo.cs
***********************************
using LogicaDeNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.InterfacesRepositorio
{
    public interface IRepositorioArticulo
    {
        public Articulo GetById(int id);
        public IEnumerable<Articulo> GetAll();
    }
}

***********************************
Archivo: IRepositorioMovimientoDeStock.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\InterfacesRepositorio\IRepositorioMovimientoDeStock.cs
***********************************
using LogicaDeNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.InterfacesRepositorio
{
    public interface IRepositorioMovimientoDeStock
    {
        public void Add(MovimientoDeStock obj);
        public MovimientoDeStock GetById(int id);
        public IEnumerable<MovimientoDeStock> GetAll(int page);
        public IEnumerable<MovimientoDeStock> GetAllXArtTipoPagl(int idArticulo, int idTipo, int page);
        public IEnumerable<Articulo> GetPorFecha(DateTime desde, DateTime hasta, int page);
        public int GetCount();
        public int GetCountFiltro(int idArticulo, int idTipo);
        public int GetCountPorFecha(DateTime desde, DateTime hasta);
        public IEnumerable<Resultado> ResumenPorAnio();

    }
}

***********************************
Archivo: IRepositorioTipoDeMovimiento.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\InterfacesRepositorio\IRepositorioTipoDeMovimiento.cs
***********************************
using LogicaDeNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.InterfacesRepositorio
{
    public interface IRepositorioTipoDeMovimiento
    {
        public void Add(TipoDeMovimiento obj);
        public void Delete(int id);
        public void Update(int id, TipoDeMovimiento obj);
        public TipoDeMovimiento GetById(int id);
        public IEnumerable<TipoDeMovimiento> GetAll();
    }
}

***********************************
Archivo: IRepositorioUsuario.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\InterfacesRepositorio\IRepositorioUsuario.cs
***********************************
using LogicaDeNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.InterfacesRepositorio
{
    public interface IRepositorioUsuario 
    {
        public Usuario Login(string email, string password); 
        public Usuario GetByEmail(string email);
        public Usuario GetById(int id);
    }
}

***********************************
Archivo: LibreriaContext.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\LibreriaContext.cs
***********************************
using LogicaAccesoDatos.EF.Config;
using LogicaDeNegocio.Entidades;
using Microsoft.EntityFrameworkCore;

namespace LogicaAccesoDatos.EF
{
    public class LibreriaContext:DbContext
    {
        public DbSet<Usuario> Usuarios { get; set; }
        public DbSet<Administrador> Administradores { get; set; }
        public DbSet<Encargado> Encargados { get; set; }



        public DbSet<Articulo> Articulos { get; set; }
        public DbSet<TipoDeMovimiento> TiposDeMovimiento { get; set; }
        public DbSet<MovimientoDeStock> MovimientosDeStock { get; set; }



        public LibreriaContext(DbContextOptions<LibreriaContext> options) : base(options) { }


        //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //{
        //    base.OnConfiguring(optionsBuilder);
        //    optionsBuilder.UseSqlServer(@"Data Source = (localdb)\MSSQLLocalDB; Initial Catalog = libreria; Integrated Security = True");
        //}
        protected override void OnModelCreating(ModelBuilder modelBuilder) 
        {
            modelBuilder.ApplyConfiguration(new UsuarioConfiguration());
            modelBuilder.ApplyConfiguration(new ArticuloConfiguration());
            modelBuilder.ApplyConfiguration(new TipoDeMovimientoConfiguration());
            base.OnModelCreating(modelBuilder);
        }
    }
}

***********************************
Archivo: PrecargaBackUp.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\PrecargaBackUp.cs
***********************************


using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.Win32;
using System;

namespace LogicaAccesoDatos.EF
{
    internal class PrecargaBackUp
    {

        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 1, "fran@mail.com", "Asd123!", "a569dcad190122e7a19036dd7740a4e238541c26a8f23fcdf015179c3d9ce70a", "franisco", "kellner", "Encargado", true });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 2, "messi@mail.com", "Asd123!.", "2785dc6aaa6c1b4b3a968bc1d6a0fd89ac7b13f331b5f2ef65716cd586b03b6e", "Lionel", "Messi", "Encargado", false });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 3, "suarez@yahoo.com", "Aqwe123.", "7f0782a1031d42b27853da9c8fe4ac45b9a4142514864fa410d581338de47103", "Luis", "kellner", "Encargado", false });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 4, "pepe@hotmail.com", "lkj34!?L", "bab6f0ca2329330647bc23f8866e505f9d578e92c470d162d26504993a3194f6", "Jose", "Araujo", "Administrador", true });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 5, "lolo@mail.com", "je.U239", "439342ed8743a61b72ea85d5e970de366986920a2b630fc8130d69ab27f197ef", "Lorenzo", "Lopez", "Administrador", false });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 6, "a@gmail.com", "Qwe1?-", "f9a11ee5c15300a6748e10cea039b9a14d8f7d86e5ef40159e055347ffbacd55", "Anton", "Perez", "Administrador", true });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 7, "juan@yahoo.com", "Alkjs34!", "ff9b5ee47dcaf7ab93debfca926830124763019e6ea241b74302d5e43b72a0ee", "Analia", "Repeto", "Administrador", false });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 8, "duidas@mail.com", "hi@!!3A", "885282956400319b3e91c67753bc90c30c6604745b26c92131a720aa7290129e", "Dj", "Sanata", "Administrador", false });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 9, "nuevo@libreria.com", "KIje23!p", "762d4e3be93f7182f1f754959b8b394696ad901841551559a6d89bd2cbd9a309", "Danilo", "kellner", "Administrador", false });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 10, "jefe@mail.com", "1ElJefe!", "d2e7c664ec934d5c10f5b83018a859e0fb8b6ca0f07260b198d21938ae0b885f", "Yamandu", "Gonzalez", "Administrador", true });

        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 1, "Lapicera", "Para escribir", "1112223334445", 52.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 2, "Libreta", "Para tomar apuntes", "1230987654345", 68.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 3, "Lapiz", "Intensidad Hb", "1234567890987", 35.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 4, "Cuadernola", "Tapa dura", "0987654321234", 110.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 5, "Compas", "Punta super resistente", "0098766543212", 94.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 6, "Goma de borrar", "Goma de pan", "1123399876543", 12.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 7, "Marcador", "Indeleble para marcar", "0098765432125", 50.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 8, "Marcador", "Para pizarra", "0987654321298", 50.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 9, "Sacapunta", "Metalico, super resistente", "9878898767123", 41.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 10, "Cuaderno", "120 hojas", "7778882348877", 89.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 11, "Regla", "30 cm", "2345678901234", 25.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 12, "Cinta adhesiva", "Transparente", "3334445556667", 18.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 13, "Tijeras", "De acero inoxidable", "7654321987654", 30.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 14, "Resaltador", "Fluorescente", "8765432109876", 22.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 15, "Folder", "Para documentos", "6543210987654", 45.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 16, "Calculadora", "De bolsillo", "9876543210123", 75.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 17, "Pegamento", "En barra", "5678901234567", 15.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 18, "Pizarra blanca", "Magnética", "2345678909876", 120.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 19, "Borrador", "Para pizarrón", "6543210987654", 28.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 20, "Cartuchera", "Para útiles", "8901234567890", 40.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 21, "Lápices de colores", "12 unidades", "3456789012345", 32.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 22, "Corrector", "Líquido", "7890123456789", 20.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 23, "Papel blanco", "A4, paquete de 100 hojas", "0123456789012", 50.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 24, "Separadores", "Para carpetas", "5432109876543", 14.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 25, "Estuche", "Para lápices", "9012345678901", 18.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 26, "Agenda", "Anual", "6789012345678", 60.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 27, "Carpeta", "De argollas", "3456789012345", 35.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 28, "Marcadores de página", "Con colores", "7890123456789", 8.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 29, "Bolígrafos", "Pack de 10 unidades", "2345678901234", 42.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 30, "Papel milimetrado", "Cuadriculado", "5678901234567", 55.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 31, "Grapadora", "De escritorio", "8901234567890", 38.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 32, "Cinta correctora", "En rollo", "1234567890123", 12.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 33, "Plumones", "Para pizarra blanca", "4567890123456", 28.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 34, "Adhesivo removible", "Para notas", "7890123456789", 10.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 35, "Clips", "Metálicos", "2345678901234", 5.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 36, "Carpeta colgante", "Para archivos", "5678901234567", 22.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 37, "Bolsa de papel", "Para regalo", "8901234567890", 8.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 38, "Cutter", "Con cuchillas reemplazables", "1234567890123", 18.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 39, "Rotulador", "Permanente", "4567890123456", 22.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 40, "Cuaderno de dibujo", "Hojas lisas", "7890123456789", 65.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 41, "Portaminas", "Con recarga", "2345678901234", 40.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 42, "Cinta doble cara", "Para manualidades", "5678901234567", 14.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 43, "Caja organizadora", "Para útiles", "8901234567890", 70.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 44, "Tabla de corte", "Autorreparable", "1234567890123", 90.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 45, "Papel kraft", "Rollo", "4567890123456", 35.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 46, "Carpetas con broche", "Pack de 10", "7890123456789", 50.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 47, "Goma EVA", "Plancha A4", "2345678901234", 12.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 48, "Perforadora", "De dos agujeros", "5678901234567", 38.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 49, "Ganchos", "Para carpetas colgantes", "8901234567890", 10.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 50, "Lápiz corrector", "Tipo bolígrafo", "1234567890123", 12.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 51, "Block de notas", "Tamaño A5", "4567890123456", 18.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 52, "Cuaderno espiral", "100 hojas", "7890123456789", 45.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 53, "Punzón", "Para manualidades", "2345678901234", 10.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 54, "Etiqueta adhesiva", "Paquete de 50", "5678901234567", 15.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 55, "Papel celofán", "Transparente", "8901234567890", 25.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 56, "Bolsa de plástico", "Con cierre", "1234567890123", 8.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 57, "Cuchilla giratoria", "Para cortar", "4567890123456", 30.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 58, "Pinceles", "Pack de 5", "7890123456789", 40.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 59, "Portafolio", "Tamaño carta", "2345678901234", 85.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 60, "Lupa", "De mano", "5678901234567", 20.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 61, "Tijeras de precisión", "Para manualidades", "8901234567890", 35.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 62, "Cuaderno profesional", "80 hojas", "1234567890123", 50.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 63, "Goma laca", "Para acabado", "4567890123456", 22.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 64, "Papel para acuarela", "200 g/m²", "7890123456789", 65.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 65, "Lápiz mecánico", "Con minas 0.5mm", "2345678901234", 28.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 66, "Minas para lápiz mecánico", "0.5mm, paquete de 20", "5678901234567", 10.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 67, "Bloc de bocetos", "Tamaño A4", "8901234567890", 35.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 68, "Papel mantequilla", "Tamaño carta", "1234567890123", 15.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 69, "Cinta de enmascarar", "Rollo de 20m", "4567890123456", 12.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 70, "Escuadra", "Plástica, 45°", "7890123456789", 22.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 71, "Regla T", "Para dibujo técnico", "2345678901234", 50.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 72, "Transportador", "Plástico, 180°", "5678901234567", 15.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 73, "Papel fotográfico", "Paquete de 20 hojas", "8901234567890", 45.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 74, "Resma de papel", "500 hojas, tamaño carta", "1234567890123", 80.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 75, "Láminas de colores", "Paquete de 10", "4567890123456", 20.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 76, "Bolsa plástica con cierre", "Paquete de 50", "7890123456789", 18.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 77, "Paleta de pintor", "Para mezclar colores", "2345678901234", 12.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 78, "Set de geometría", "Regla, escuadra y compás", "5678901234567", 30.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 79, "Cinta métrica", "Retráctil, 5m", "8901234567890", 25.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 80, "Carpeta de presentación", "Con fundas", "1234567890123", 35.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 81, "Goma arábiga", "Para manualidades", "4567890123456", 18.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 82, "Cinta adhesiva de papel", "Rollo de 30m", "7890123456789", 22.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 83, "Caja de archivo", "Para documentos", "2345678901234", 28.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 84, "Cartulina", "Paquete de 20", "5678901234567", 24.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 85, "Papel lustrillo", "Paquete de 10", "8901234567890", 15.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 86, "Papel crepé", "Rollo de 2m", "1234567890123", 10.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 87, "Afilador de lápices", "Manual, de mano", "4567890123456", 25.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 88, "Tabla de madera", "Para dibujo", "7890123456789", 45.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 89, "Portafolios expandible", "Con 12 divisiones", "2345678901234", 55.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 90, "Set de lápices", "Grafito, 6 unidades", "5678901234567", 35.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 91, "Tiza", "Paquete de 50", "8901234567890", 20.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 92, "Alfombrilla de corte", "Para manualidades", "1234567890123", 25.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 93, "Libro de dibujo", "Para colorear", "4567890123456", 30.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 94, "Portadocumentos", "Transparente", "7890123456789", 12.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 95, "Separadores de colores", "Para carpetas", "2345678901234", 15.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 96, "Mochila escolar", "Para niños", "5678901234567", 120.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 97, "Tablón de anuncios", "Con corcho", "8901234567890", 80.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 98, "Gráficas", "Pack de 5 hojas", "1234567890123", 20.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 99, "Pegatinas", "Decorativas", "4567890123456", 8.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 100, "Mapa", "Del mundo", "7890123456789", 25.00 });

        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 1, "Compra", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 2, "Venta", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 3, "Rotura", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 4, "Pérdida", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 5, "Ingreso de tienda", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 6, "Devolución", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 7, "Donación recibida", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 8, "Donación realizada", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 9, "Ajuste a mas por inventario", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 10, "Ajuste a menos por inventario", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 11, "Transferencia recibida", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 12, "Transferencia enviada", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 13, "Devolución de cliente", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 14, "Devolución a proveedor", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 15, "Corrección, aumento por error", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 16, "Corrección, disminuye por error", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 17, "Reembolso recibido", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 18, "Reembolso realizado", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 19, "Promoción", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 20, "Regalo", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 21, "Producción terminada", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 22, "Materia prima usada", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 23, "Aumento por cambio de estado", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 24, "Disminucion por cambio de estado", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 25, "Aumento por rotación de stock", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 26, "Disminucion por rotación de stock", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 27, "Pedido especial recibido", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 28, "Pedido especial enviado", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 29, "Ingreso por reciclaje", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 30, "Salida por reciclaje", false });


        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 1, new DateTime(2023, 1, 1, 10, 0, 0), 1, 1, 1, 20 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 2, new DateTime(2023, 1, 2, 11, 0, 0), 2, 2, 2, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 3, new DateTime(2023, 1, 3, 12, 0, 0), 3, 3, 3, 30 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 4, new DateTime(2023, 1, 4, 13, 0, 0), 4, 4, 4, 25 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 5, new DateTime(2023, 1, 5, 14, 0, 0), 5, 5, 5, 40 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 6, new DateTime(2023, 1, 6, 15, 0, 0), 6, 6, 6, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 7, new DateTime(2023, 1, 7, 16, 0, 0), 7, 1, 1, 10 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 8, new DateTime(2023, 1, 8, 17, 0, 0), 8, 2, 2, 20 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 9, new DateTime(2023, 1, 9, 18, 0, 0), 9, 3, 3, 5 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 10, new DateTime(2024, 1, 10, 19, 0, 0), 5, 5, 4, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 11, new DateTime(2024, 1, 11, 20, 0, 0), 11, 5, 5, 25 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 12, new DateTime(2024, 1, 12, 21, 0, 0), 12, 6, 6, 50 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 13, new DateTime(2024, 1, 13, 22, 0, 0), 5, 5, 1, 35 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 14, new DateTime(2024, 1, 14, 23, 0, 0), 14, 2, 2, 45 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 15, new DateTime(2024, 1, 15, 23, 0, 0), 15, 3, 3, 60 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 16, new DateTime(2024, 1, 16, 10, 0, 0), 5, 5, 4, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 17, new DateTime(2024, 1, 17, 11, 0, 0), 17, 5, 5, 25 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 18, new DateTime(2024, 1, 18, 12, 0, 0), 18, 6, 6, 40 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 19, new DateTime(2024, 1, 19, 13, 0, 0), 19, 1, 1, 10 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 20, new DateTime(2024, 1, 20, 14, 0, 0), 20, 2, 2, 25 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 21, new DateTime(2024, 1, 21, 15, 0, 0), 21, 3, 3, 20 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 22, new DateTime(2024, 1, 22, 16, 0, 0), 22, 4, 4, 30 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 23, new DateTime(2024, 1, 23, 17, 0, 0), 5, 5, 5, 35 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 24, new DateTime(2024, 1, 24, 18, 0, 0), 24, 6, 6, 50 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 25, new DateTime(2024, 1, 25, 19, 0, 0), 25, 1, 1, 20 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 26, new DateTime(2024, 1, 26, 20, 0, 0), 26, 2, 2, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 27, new DateTime(2024, 1, 27, 21, 0, 0), 27, 3, 3, 30 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 28, new DateTime(2024, 1, 28, 22, 0, 0), 28, 4, 4, 25 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 29, new DateTime(2024, 1, 29, 23, 0, 0), 29, 5, 5, 40 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 30, new DateTime(2024, 1, 30, 23, 0, 0), 30, 6, 6, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 31, new DateTime(2024, 1, 31, 10, 0, 0), 5, 5, 1, 20 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 32, new DateTime(2024, 2, 1, 11, 0, 0), 2, 2, 2, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 33, new DateTime(2024, 2, 2, 12, 0, 0), 3, 3, 3, 30 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 34, new DateTime(2024, 2, 3, 13, 0, 0), 4, 4, 4, 25 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 35, new DateTime(2024, 1, 31, 10, 0, 0), 5, 5, 5, 40 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 36, new DateTime(2024, 2, 5, 15, 0, 0), 6, 6, 6, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 37, new DateTime(2024, 2, 6, 16, 0, 0), 7, 1, 1, 10 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 38, new DateTime(2024, 2, 7, 17, 0, 0), 8, 2, 2, 20 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 39, new DateTime(2024, 2, 8, 18, 0, 0), 9, 3, 3, 5 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 40, new DateTime(2024, 2, 9, 19, 0, 0), 10, 4, 4, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 41, new DateTime(2024, 2, 10, 20, 0, 0), 11, 5, 5, 25 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 42, new DateTime(2024, 2, 11, 21, 0, 0), 12, 6, 6, 50 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 43, new DateTime(2024, 2, 12, 22, 0, 0), 13, 1, 1, 35 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 44, new DateTime(2024, 2, 13, 23, 0, 0), 14, 2, 2, 45 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 45, new DateTime(2024, 2, 14, 23, 0, 0), 15, 3, 3, 60 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 46, new DateTime(2024, 2, 15, 10, 0, 0), 16, 4, 4, 15 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 47, new DateTime(2024, 2, 16, 11, 0, 0), 17, 5, 5, 25 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 48, new DateTime(2024, 2, 17, 12, 0, 0), 18, 6, 6, 40 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 49, new DateTime(2024, 2, 18, 13, 0, 0), 19, 1, 1, 10 });
        //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 50, new DateTime(2024, 2, 19, 14, 0, 0), 20, 2, 2, 25 });




        //NO USAR, DE ACA PARA ABAJO SON LOS VIEJOS

        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 1, "Lapicera", "Para escribir", "1112223334445", 52.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 2, "Libreta", "Para tomar apuntes", "1230987654345", 68.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 3, "Lapiz", "Intensidad Hb", "1234567890987", 35.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 4, "Cuadernola", "Tapa dura", "0987654321234", 110.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 5, "Compas", "Punta super resistente", "0098766543212", 94.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 6, "Goma de borrar", "Goma de pan", "1123399876543", 12.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 7, "Marcador", "Indeleble para marcar", "0098765432125", 50.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 8, "Marcador", "Para pizarra", "0987654321298", 50.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 9, "Sacapunta", "Metalico, super resistente", "9878898767123", 41.00 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 10, "Cuaderno", "120 hojas", "7778882348877", 89.00 });


        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 1, "Compra", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 2, "Venta", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 3, "Rotura", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 4, "Perdida", false });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 5, "Ingreso de tienda", true });
        //migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 6, "Devolucion", true });

    }
}

***********************************
Archivo: RepositorioArticulo.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\RepositorioArticulo.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.InterfacesRepositorio;


namespace LogicaAccesoDatos.EF
{
    public class RepositorioArticulo : IRepositorioArticulo
    {
        private LibreriaContext _context;
        public RepositorioArticulo(LibreriaContext context)
        {
            _context = context;
        }

        public IEnumerable<Articulo> GetAll()
        {
            IEnumerable<Articulo> respuesta = _context.Articulos
                                              .OrderBy(articulo=>articulo.Nombre)
                                              .ToList();
            if (respuesta.Count() == 0)
            {
                throw new NotFoundException();
            }
            return respuesta;
        }

        public Articulo GetById(int id)
        {
            if (id == null || id < 0)
            {
                throw new ArgumentNullRepositorioException();
            }
            Articulo? resultado = _context.Articulos.FirstOrDefault(art => art.Id == id);
            if (resultado == null)
            {
                throw new NotFoundException();
            }
            return resultado;
        }
    }
}

***********************************
Archivo: RepositorioMovimientoDeStock.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\RepositorioMovimientoDeStock.cs
***********************************
using Azure;
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.InterfacesRepositorio;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF
{
    public class RepositorioMovimientoDeStock : IRepositorioMovimientoDeStock
    {
        private LibreriaContext _context;
        public RepositorioMovimientoDeStock(LibreriaContext context)
        {
            _context = context;
        }
        public void Add(MovimientoDeStock obj)
        {
            if (obj == null)
            {
                throw new ArgumentNullRepositorioException();
            }
            obj.Validar();
            obj.Id = 0;
            _context.MovimientosDeStock.Add(obj);
            _context.SaveChanges();
        }

        public IEnumerable<MovimientoDeStock> GetAll(int page=0)
        {
            IEnumerable<MovimientoDeStock> respuesta = _context.MovimientosDeStock.
                                                        Include(m => m.ejecutor).Include(m => m.tipo).
                                                        Include(m => m.articulo).
                                                        Skip(page * ParametrosGenerales.pageSize).
                                                        Take(ParametrosGenerales.pageSize).
                                                        ToList();
            if (respuesta.Count() == 0)
            {
                throw new NotFoundException();
            }
            return respuesta;
        }
        public int GetCount()
        {
            return _context.MovimientosDeStock.AsEnumerable().ToList().Count();
        }
        public int GetCountFiltro(int idArticulo, int idTipo)
        {
            return _context.MovimientosDeStock.
                    Where(m => m.articulo.Id == idArticulo && m.tipo.Id == idTipo).AsEnumerable().ToList().Count();
        }
        public int GetCountPorFecha(DateTime desde, DateTime hasta)
        {
            return _context.MovimientosDeStock.
                    Where(m => m.fecha >= desde && m.fecha <= hasta).Select(m => m.articulo).
                    Distinct().ToList().Count();
        }
        public IEnumerable<MovimientoDeStock> GetAllXArtTipoPagl(int idArticulo, int idTipo, int page=0)
        {
            if (idArticulo == null || idArticulo < 0)
            {
                throw new ArgumentNullRepositorioException();
            }
            Articulo? resultado = _context.Articulos.FirstOrDefault(art => art.Id == idArticulo);
            if (resultado == null)
            {
                throw new NotFoundException();
            }
            if (idTipo == null || idTipo < 0)
            {
                throw new ArgumentNullRepositorioException();
            }
            TipoDeMovimiento? tipo = _context.TiposDeMovimiento.FirstOrDefault(t => t.Id == idTipo);
            if (tipo == null)
            {
                throw new NotFoundException();
            }
            return _context.MovimientosDeStock.
                    Where(m=>m.articulo.Id == idArticulo && m.tipo.Id==idTipo).
                    Include(m=>m.ejecutor).Include(m=>m.tipo).Include(m=>m.articulo).
                    OrderByDescending(m=>m.fecha).ThenBy(m=>m.cantidad).
                    Skip(page * ParametrosGenerales.pageSize).
                    Take(ParametrosGenerales.pageSize).
                    ToList();
        }

        public MovimientoDeStock GetById(int id)
        {
            if (id == null || id < 0)
            {
                throw new ArgumentNullRepositorioException();
            }
            MovimientoDeStock? resultado = _context.MovimientosDeStock.Include(m => m.ejecutor)
                                                                      .Include(m => m.tipo).Include(m => m.articulo)
                                                                      .FirstOrDefault(m => m.Id == id);
            if (resultado == null)
            {
                throw new NotFoundException();
            }
            return resultado;
        }

        public IEnumerable<Articulo> GetPorFecha(DateTime desde, DateTime hasta, int page)
        {
            if(desde==null||hasta==null)
            {
                throw new ArgumentNullRepositorioException();
            }
            IEnumerable<Articulo> res = _context.MovimientosDeStock.
                    Where(m=>m.fecha>=desde && m.fecha<=hasta).
                    Select(m=>m.articulo).
                    Distinct().
                    Skip(page * ParametrosGenerales.pageSize).
                    Take(ParametrosGenerales.pageSize).
                    ToList();
            if(res == null)
            {
                throw new NotFoundException();
            }
            return res;
        }

        public IEnumerable<Resultado> ResumenPorAnio()
        {
            var resumen = _context.MovimientosDeStock
                .GroupBy(m=> new {Anio = m.fecha.Year, Movimiento = m.tipo.Nombre },
                (key, group) => new
                {
                    key.Anio,
                    key.Movimiento,
                    Total = group.Sum(m=>m.cantidad)
                }).OrderBy(r=>r.Anio)
                .ThenBy(r=>r.Movimiento)
                .ToList();
            var totalesAnuales = resumen
                .GroupBy(resumen=> resumen.Anio)
                .Select(g=> new
                {
                    Anio = g.Key,
                    Movimientos = g.Select(m=> new {Tipo = m.Movimiento, Cantidad = m.Total }),
                    CantidadAnual = g.Sum(r=>r.Total)
                }).ToList();

            var res = new List<Resultado>();
            foreach (var item in totalesAnuales)
            {
                var unResumen = new Resultado
                {
                    Anio = item.Anio,
                    CantidadAnual = item.CantidadAnual,
                    resultadoAnual = new List<ResultadoAnual>()
                };
                foreach(var tipo in item.Movimientos)
                {
                    unResumen.resultadoAnual.Add(new ResultadoAnual
                    {
                        Movimiento = tipo.Tipo,
                        Cantidad = tipo.Cantidad
                    });
                }
                res.Add(unResumen);
            }
            return res;
        }
    }
}

***********************************
Archivo: RepositorioTipoDeMovimiento.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\RepositorioTipoDeMovimiento.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.InterfacesRepositorio;


namespace LogicaAccesoDatos.EF
{
    public class RepositorioTipoDeMovimiento : IRepositorioTipoDeMovimiento
    {
        private LibreriaContext _context;
        public RepositorioTipoDeMovimiento(LibreriaContext context)
        {
            _context = context;
        }
        public void Add(TipoDeMovimiento obj)
        {
            if (obj == null)
            {
                throw new ArgumentNullRepositorioException();
            }
            obj.Validar();
            obj.Id = 0;
            _context.TiposDeMovimiento.Add(obj);
            _context.SaveChanges();
        }

        public void Delete(int id)
        {
            MovimientoDeStock? muv = _context.MovimientosDeStock.FirstOrDefault(m => m.tipo.Id == id);
            if (muv == null)
            {
                TipoDeMovimiento tipo = GetById(id);
                _context.TiposDeMovimiento.Remove(tipo);
                _context.SaveChanges();
            }
            else
            {
                throw new ArgumentNullRepositorioException();
            }
        }

        public IEnumerable<TipoDeMovimiento> GetAll()
        {
            IEnumerable<TipoDeMovimiento> respuesta = _context.TiposDeMovimiento.ToList();
            if (respuesta.Count() == 0)
            {
                throw new NotFoundException();
            }
            return respuesta;
        }

        public TipoDeMovimiento GetById(int id)
        {
            if (id == null || id < 0)
            {
                throw new ArgumentNullRepositorioException();
            }
            TipoDeMovimiento? resultado = _context.TiposDeMovimiento.FirstOrDefault(t => t.Id == id);
            if (resultado == null)
            {
                throw new NotFoundException();
            }
            return resultado;
        }

        public void Update(int id, TipoDeMovimiento obj)
        {
            MovimientoDeStock? muv = _context.MovimientosDeStock.FirstOrDefault(m => m.tipo.Id == id);
            if (muv == null)
            {
                TipoDeMovimiento t = GetById(id);
            t.Update(obj);
            _context.TiposDeMovimiento.Update(t);
            _context.SaveChanges();
            }
            else
            {
                throw new ArgumentNullRepositorioException();
            }
        }
    }
}

***********************************
Archivo: RepositorioUsuario.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\RepositorioUsuario.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF
{
    public class RepositorioUsuario : IRepositorioUsuario
    {
        private LibreriaContext _context;
        public RepositorioUsuario(LibreriaContext libreriaContext)
        {
            _context = libreriaContext;
        }


        public Usuario GetById(int id)
        {
            if (id == null || id < 0)
            {
                throw new ArgumentNullRepositorioException();
            }
            Usuario? resultado = _context.Usuarios.FirstOrDefault(usu => usu.Id == id);
            if (resultado == null)
            {
                throw new NotFoundException();
            }
            return resultado;
        }

        public Usuario? Login(string email, string password)
        {
            Usuario resultado = _context.Usuarios.FirstOrDefault(usu => usu.Email == email && usu.PasswordHash == password);
            if(resultado != null)
            {
                return resultado;
            }
            else
            {
                throw new LoginException();
            }
        }

        public Usuario GetByEmail(string email)
        {
            Usuario resultado = _context.Usuarios.FirstOrDefault(usu => usu.Email == email);
            if (resultado != null)
            {
                return resultado;
            }
            throw new NotFoundException();
        }
    }
}

***********************************
Archivo: ArgumentNullRepositorioException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Excepciones\ArgumentNullRepositorioException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    public class ArgumentNullRepositorioException : RepositorioException
    {
        public ArgumentNullRepositorioException(): base("No se recibio informacion valida.") { }

    }
}

***********************************
Archivo: ExistException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Excepciones\ExistException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    public class ExistException:RepositorioException
    {
        public ExistException() : base("Identificador existente en el sistema.") { }
    }
}

***********************************
Archivo: LoginException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Excepciones\LoginException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    public class LoginException:RepositorioException
    {
        public LoginException():base("Usuario o contraseña incorrecto.") { }
    }
}

***********************************
Archivo: NotFoundException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Excepciones\NotFoundException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    public class NotFoundException : RepositorioException
    {
        public NotFoundException(): base("No se encontro la información solicitada.") { }

    }
}

***********************************
Archivo: RepositorioException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Excepciones\RepositorioException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    public class RepositorioException : Exception
    {
        public RepositorioException() { }
        public RepositorioException(string message) : base(message) { }
    }
}

***********************************
Archivo: 20240618004151_init.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Migrations\20240618004151_init.cs
***********************************
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    /// <inheritdoc />
    public partial class init : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Articulos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Descripcion = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Codigo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrecioDeVenta = table.Column<decimal>(type: "decimal(8,2)", precision: 8, scale: 2, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Articulos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TiposDeMovimiento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    aumentaStock = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TiposDeMovimiento", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Usuarios",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Email = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Nombre = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Apellido = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Discriminator = table.Column<string>(type: "nvarchar(13)", maxLength: 13, nullable: false),
                    ModificaUsuario = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Usuarios", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MovimientosDeStock",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    fecha = table.Column<DateTime>(type: "datetime2", nullable: false),
                    articuloId = table.Column<int>(type: "int", nullable: false),
                    tipoId = table.Column<int>(type: "int", nullable: false),
                    ejecutorId = table.Column<int>(type: "int", nullable: false),
                    cantidad = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovimientosDeStock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MovimientosDeStock_Articulos_articuloId",
                        column: x => x.articuloId,
                        principalTable: "Articulos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MovimientosDeStock_TiposDeMovimiento_tipoId",
                        column: x => x.tipoId,
                        principalTable: "TiposDeMovimiento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MovimientosDeStock_Usuarios_ejecutorId",
                        column: x => x.ejecutorId,
                        principalTable: "Usuarios",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosDeStock_articuloId",
                table: "MovimientosDeStock",
                column: "articuloId");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosDeStock_ejecutorId",
                table: "MovimientosDeStock",
                column: "ejecutorId");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosDeStock_tipoId",
                table: "MovimientosDeStock",
                column: "tipoId");

            migrationBuilder.CreateIndex(
                name: "IX_TiposDeMovimiento_Nombre",
                table: "TiposDeMovimiento",
                column: "Nombre",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Usuarios_Email",
                table: "Usuarios",
                column: "Email",
                unique: true);


            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 1, "fran@mail.com", "Asd123!", "a569dcad190122e7a19036dd7740a4e238541c26a8f23fcdf015179c3d9ce70a", "franisco", "kellner", "Encargado", true });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 2, "messi@mail.com", "Asd123!.", "2785dc6aaa6c1b4b3a968bc1d6a0fd89ac7b13f331b5f2ef65716cd586b03b6e", "Lionel", "Messi", "Encargado", false });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 3, "suarez@yahoo.com", "Aqwe123.", "7f0782a1031d42b27853da9c8fe4ac45b9a4142514864fa410d581338de47103", "Luis", "kellner", "Encargado", false });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 4, "pepe@hotmail.com", "lkj34!?L", "bab6f0ca2329330647bc23f8866e505f9d578e92c470d162d26504993a3194f6", "Jose", "Araujo", "Administrador", true });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 5, "lolo@mail.com", "je.U239", "439342ed8743a61b72ea85d5e970de366986920a2b630fc8130d69ab27f197ef", "Lorenzo", "Lopez", "Administrador", false });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 6, "a@gmail.com", "Qwe1?-", "f9a11ee5c15300a6748e10cea039b9a14d8f7d86e5ef40159e055347ffbacd55", "Anton", "Perez", "Administrador", true });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 7, "juan@yahoo.com", "Alkjs34!", "ff9b5ee47dcaf7ab93debfca926830124763019e6ea241b74302d5e43b72a0ee", "Analia", "Repeto", "Administrador", false });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 8, "duidas@mail.com", "hi@!!3A", "885282956400319b3e91c67753bc90c30c6604745b26c92131a720aa7290129e", "Dj", "Sanata", "Administrador", false });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 9, "nuevo@libreria.com", "KIje23!p", "762d4e3be93f7182f1f754959b8b394696ad901841551559a6d89bd2cbd9a309", "Danilo", "kellner", "Administrador", false });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Email", "Password", "PasswordHash", "Nombre", "Apellido", "Discriminator", "ModificaUsuario" }, new object[] { 10, "jefe@mail.com", "1ElJefe!", "d2e7c664ec934d5c10f5b83018a859e0fb8b6ca0f07260b198d21938ae0b885f", "Yamandu", "Gonzalez", "Administrador", true });

            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 1, "Lapicera", "Para escribir", "1112223334445", 52.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 2, "Libreta", "Para tomar apuntes", "1230987654345", 68.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 3, "Lapiz", "Intensidad Hb", "1234567890987", 35.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 4, "Cuadernola", "Tapa dura", "0987654321234", 110.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 5, "Compas", "Punta super resistente", "0098766543212", 94.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 6, "Goma de borrar", "Goma de pan", "1123399876543", 12.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 7, "Marcador", "Indeleble para marcar", "0098765432125", 50.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 8, "Marcador", "Para pizarra", "0987654321298", 50.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 9, "Sacapunta", "Metalico, super resistente", "9878898767123", 41.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 10, "Cuaderno", "120 hojas", "7778882348877", 89.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 11, "Regla", "30 cm", "2345678901234", 25.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 12, "Cinta adhesiva", "Transparente", "3334445556667", 18.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 13, "Tijeras", "De acero inoxidable", "7654321987654", 30.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 14, "Resaltador", "Fluorescente", "8765432109876", 22.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 15, "Folder", "Para documentos", "6543210987654", 45.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 16, "Calculadora", "De bolsillo", "9876543210123", 75.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 17, "Pegamento", "En barra", "5678901234567", 15.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 18, "Pizarra blanca", "Magnética", "2345678909876", 120.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 19, "Borrador", "Para pizarrón", "6543210987654", 28.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 20, "Cartuchera", "Para útiles", "8901234567890", 40.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 21, "Lápices de colores", "12 unidades", "3456789012345", 32.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 22, "Corrector", "Líquido", "7890123456789", 20.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 23, "Papel blanco", "A4, paquete de 100 hojas", "0123456789012", 50.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 24, "Separadores", "Para carpetas", "5432109876543", 14.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 25, "Estuche", "Para lápices", "9012345678901", 18.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 26, "Agenda", "Anual", "6789012345678", 60.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 27, "Carpeta", "De argollas", "3456789012345", 35.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 28, "Marcadores de página", "Con colores", "7890123456789", 8.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 29, "Bolígrafos", "Pack de 10 unidades", "2345678901234", 42.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 30, "Papel milimetrado", "Cuadriculado", "5678901234567", 55.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 31, "Grapadora", "De escritorio", "8901234567890", 38.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 32, "Cinta correctora", "En rollo", "1234567890123", 12.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 33, "Plumones", "Para pizarra blanca", "4567890123456", 28.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 34, "Adhesivo removible", "Para notas", "7890123456789", 10.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 35, "Clips", "Metálicos", "2345678901234", 5.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 36, "Carpeta colgante", "Para archivos", "5678901234567", 22.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 37, "Bolsa de papel", "Para regalo", "8901234567890", 8.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 38, "Cutter", "Con cuchillas reemplazables", "1234567890123", 18.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 39, "Rotulador", "Permanente", "4567890123456", 22.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 40, "Cuaderno de dibujo", "Hojas lisas", "7890123456789", 65.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 41, "Portaminas", "Con recarga", "2345678901234", 40.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 42, "Cinta doble cara", "Para manualidades", "5678901234567", 14.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 43, "Caja organizadora", "Para útiles", "8901234567890", 70.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 44, "Tabla de corte", "Autorreparable", "1234567890123", 90.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 45, "Papel kraft", "Rollo", "4567890123456", 35.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 46, "Carpetas con broche", "Pack de 10", "7890123456789", 50.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 47, "Goma EVA", "Plancha A4", "2345678901234", 12.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 48, "Perforadora", "De dos agujeros", "5678901234567", 38.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 49, "Ganchos", "Para carpetas colgantes", "8901234567890", 10.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 50, "Lápiz corrector", "Tipo bolígrafo", "1234567890123", 12.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 51, "Block de notas", "Tamaño A5", "4567890123456", 18.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 52, "Cuaderno espiral", "100 hojas", "7890123456789", 45.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 53, "Punzón", "Para manualidades", "2345678901234", 10.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 54, "Etiqueta adhesiva", "Paquete de 50", "5678901234567", 15.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 55, "Papel celofán", "Transparente", "8901234567890", 25.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 56, "Bolsa de plástico", "Con cierre", "1234567890123", 8.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 57, "Cuchilla giratoria", "Para cortar", "4567890123456", 30.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 58, "Pinceles", "Pack de 5", "7890123456789", 40.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 59, "Portafolio", "Tamaño carta", "2345678901234", 85.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 60, "Lupa", "De mano", "5678901234567", 20.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 61, "Tijeras de precisión", "Para manualidades", "8901234567890", 35.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 62, "Cuaderno profesional", "80 hojas", "1234567890123", 50.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 63, "Goma laca", "Para acabado", "4567890123456", 22.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 64, "Papel para acuarela", "200 g/m²", "7890123456789", 65.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 65, "Lápiz mecánico", "Con minas 0.5mm", "2345678901234", 28.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 66, "Minas para lápiz mecánico", "0.5mm, paquete de 20", "5678901234567", 10.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 67, "Bloc de bocetos", "Tamaño A4", "8901234567890", 35.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 68, "Papel mantequilla", "Tamaño carta", "1234567890123", 15.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 69, "Cinta de enmascarar", "Rollo de 20m", "4567890123456", 12.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 70, "Escuadra", "Plástica, 45°", "7890123456789", 22.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 71, "Regla T", "Para dibujo técnico", "2345678901234", 50.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 72, "Transportador", "Plástico, 180°", "5678901234567", 15.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 73, "Papel fotográfico", "Paquete de 20 hojas", "8901234567890", 45.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 74, "Resma de papel", "500 hojas, tamaño carta", "1234567890123", 80.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 75, "Láminas de colores", "Paquete de 10", "4567890123456", 20.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 76, "Bolsa plástica con cierre", "Paquete de 50", "7890123456789", 18.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 77, "Paleta de pintor", "Para mezclar colores", "2345678901234", 12.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 78, "Set de geometría", "Regla, escuadra y compás", "5678901234567", 30.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 79, "Cinta métrica", "Retráctil, 5m", "8901234567890", 25.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 80, "Carpeta de presentación", "Con fundas", "1234567890123", 35.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 81, "Goma arábiga", "Para manualidades", "4567890123456", 18.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 82, "Cinta adhesiva de papel", "Rollo de 30m", "7890123456789", 22.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 83, "Caja de archivo", "Para documentos", "2345678901234", 28.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 84, "Cartulina", "Paquete de 20", "5678901234567", 24.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 85, "Papel lustrillo", "Paquete de 10", "8901234567890", 15.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 86, "Papel crepé", "Rollo de 2m", "1234567890123", 10.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 87, "Afilador de lápices", "Manual, de mano", "4567890123456", 25.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 88, "Tabla de madera", "Para dibujo", "7890123456789", 45.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 89, "Portafolios expandible", "Con 12 divisiones", "2345678901234", 55.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 90, "Set de lápices", "Grafito, 6 unidades", "5678901234567", 35.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 91, "Tiza", "Paquete de 50", "8901234567890", 20.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 92, "Alfombrilla de corte", "Para manualidades", "1234567890123", 25.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 93, "Libro de dibujo", "Para colorear", "4567890123456", 30.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 94, "Portadocumentos", "Transparente", "7890123456789", 12.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 95, "Separadores de colores", "Para carpetas", "2345678901234", 15.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 96, "Mochila escolar", "Para niños", "5678901234567", 120.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 97, "Tablón de anuncios", "Con corcho", "8901234567890", 80.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 98, "Gráficas", "Pack de 5 hojas", "1234567890123", 20.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 99, "Pegatinas", "Decorativas", "4567890123456", 8.00 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "PrecioDeVenta" }, new object[] { 100, "Mapa", "Del mundo", "7890123456789", 25.00 });

            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 1, "Compra", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 2, "Venta", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 3, "Rotura", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 4, "Pérdida", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 5, "Ingreso de tienda", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 6, "Devolución", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 7, "Donación recibida", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 8, "Donación realizada", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 9, "Ajuste a mas por inventario", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 10, "Ajuste a menos por inventario", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 11, "Transferencia recibida", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 12, "Transferencia enviada", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 13, "Devolución de cliente", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 14, "Devolución a proveedor", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 15, "Corrección, aumento por error", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 16, "Corrección, disminuye por error", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 17, "Reembolso recibido", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 18, "Reembolso realizado", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 19, "Promoción", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 20, "Regalo", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 21, "Producción terminada", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 22, "Materia prima usada", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 23, "Aumento por cambio de estado", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 24, "Disminucion por cambio de estado", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 25, "Aumento por rotación de stock", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 26, "Disminucion por rotación de stock", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 27, "Pedido especial recibido", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 28, "Pedido especial enviado", false });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 29, "Ingreso por reciclaje", true });
            migrationBuilder.InsertData("TiposDeMovimiento", new[] { "Id", "Nombre", "aumentaStock" }, new object[] { 30, "Salida por reciclaje", false });


            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 1, new DateTime(2024, 1, 1, 10, 0, 0), 1, 1, 1, 20 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 2, new DateTime(2024, 1, 2, 11, 0, 0), 2, 2, 2, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 3, new DateTime(2024, 1, 3, 12, 0, 0), 3, 3, 3, 30 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 4, new DateTime(2024, 1, 4, 13, 0, 0), 4, 4, 4, 25 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 5, new DateTime(2024, 1, 5, 14, 0, 0), 5, 5, 5, 40 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 6, new DateTime(2024, 1, 6, 15, 0, 0), 6, 6, 6, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 7, new DateTime(2024, 1, 7, 16, 0, 0), 7, 1, 1, 10 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 8, new DateTime(2024, 1, 8, 17, 0, 0), 8, 2, 2, 20 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 9, new DateTime(2024, 1, 9, 18, 0, 0), 9, 3, 3, 5 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 10, new DateTime(2024, 1, 10, 19, 0, 0), 10, 4, 4, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 11, new DateTime(2024, 1, 11, 20, 0, 0), 11, 5, 5, 25 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 12, new DateTime(2024, 1, 12, 21, 0, 0), 12, 6, 6, 50 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 13, new DateTime(2024, 1, 13, 22, 0, 0), 13, 1, 1, 35 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 14, new DateTime(2024, 1, 14, 23, 0, 0), 14, 2, 2, 45 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 15, new DateTime(2024, 1, 15, 24, 0, 0), 15, 3, 3, 60 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 16, new DateTime(2024, 1, 16, 10, 0, 0), 16, 4, 4, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 17, new DateTime(2024, 1, 17, 11, 0, 0), 17, 5, 5, 25 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 18, new DateTime(2024, 1, 18, 12, 0, 0), 18, 6, 6, 40 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 19, new DateTime(2024, 1, 19, 13, 0, 0), 19, 1, 1, 10 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 20, new DateTime(2024, 1, 20, 14, 0, 0), 20, 2, 2, 25 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 21, new DateTime(2024, 1, 21, 15, 0, 0), 21, 3, 3, 20 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 22, new DateTime(2024, 1, 22, 16, 0, 0), 22, 4, 4, 30 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 23, new DateTime(2024, 1, 23, 17, 0, 0), 23, 5, 5, 35 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 24, new DateTime(2024, 1, 24, 18, 0, 0), 24, 6, 6, 50 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 25, new DateTime(2024, 1, 25, 19, 0, 0), 25, 1, 1, 20 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 26, new DateTime(2024, 1, 26, 20, 0, 0), 26, 2, 2, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 27, new DateTime(2024, 1, 27, 21, 0, 0), 27, 3, 3, 30 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 28, new DateTime(2024, 1, 28, 22, 0, 0), 28, 4, 4, 25 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 29, new DateTime(2024, 1, 29, 23, 0, 0), 29, 5, 5, 40 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 30, new DateTime(2024, 1, 30, 24, 0, 0), 30, 6, 6, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 31, new DateTime(2024, 1, 31, 10, 0, 0), 1, 1, 1, 20 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 32, new DateTime(2024, 2, 1, 11, 0, 0), 2, 2, 2, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 33, new DateTime(2024, 2, 2, 12, 0, 0), 3, 3, 3, 30 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 34, new DateTime(2024, 2, 3, 13, 0, 0), 4, 4, 4, 25 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 35, new DateTime(2024, 2, 4, 14, 0, 0), 5, 5, 5, 40 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 36, new DateTime(2024, 2, 5, 15, 0, 0), 6, 6, 6, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 37, new DateTime(2024, 2, 6, 16, 0, 0), 7, 1, 1, 10 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 38, new DateTime(2024, 2, 7, 17, 0, 0), 8, 2, 2, 20 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 39, new DateTime(2024, 2, 8, 18, 0, 0), 9, 3, 3, 5 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 40, new DateTime(2024, 2, 9, 19, 0, 0), 10, 4, 4, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 41, new DateTime(2024, 2, 10, 20, 0, 0), 11, 5, 5, 25 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 42, new DateTime(2024, 2, 11, 21, 0, 0), 12, 6, 6, 50 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 43, new DateTime(2024, 2, 12, 22, 0, 0), 13, 1, 1, 35 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 44, new DateTime(2024, 2, 13, 23, 0, 0), 14, 2, 2, 45 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 45, new DateTime(2024, 2, 14, 24, 0, 0), 15, 3, 3, 60 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 46, new DateTime(2024, 2, 15, 10, 0, 0), 16, 4, 4, 15 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 47, new DateTime(2024, 2, 16, 11, 0, 0), 17, 5, 5, 25 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 48, new DateTime(2024, 2, 17, 12, 0, 0), 18, 6, 6, 40 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 49, new DateTime(2024, 2, 18, 13, 0, 0), 19, 1, 1, 10 });
            //migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 50, new DateTime(2024, 2, 19, 14, 0, 0), 20, 2, 2, 25 });


        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "MovimientosDeStock");

            migrationBuilder.DropTable(
                name: "Articulos");

            migrationBuilder.DropTable(
                name: "TiposDeMovimiento");

            migrationBuilder.DropTable(
                name: "Usuarios");
        }

    }
}

***********************************
Archivo: 20240618004151_init.Designer.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Migrations\20240618004151_init.Designer.cs
***********************************
// <auto-generated />
using System;
using LogicaAccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(LibreriaContext))]
    [Migration("20240618004151_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioDeVenta")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.MovimientoDeStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("articuloId")
                        .HasColumnType("int");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ejecutorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("tipoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("articuloId");

                    b.HasIndex("ejecutorId");

                    b.HasIndex("tipoId");

                    b.ToTable("MovimientosDeStock");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.TipoDeMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("aumentaStock")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TiposDeMovimiento");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Administrador", b =>
                {
                    b.HasBaseType("LogicaDeNegocio.Entidades.Usuario");

                    b.Property<bool>("ModificaUsuario")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Encargado", b =>
                {
                    b.HasBaseType("LogicaDeNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Encargado");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.MovimientoDeStock", b =>
                {
                    b.HasOne("LogicaDeNegocio.Entidades.Articulo", "articulo")
                        .WithMany()
                        .HasForeignKey("articuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaDeNegocio.Entidades.Usuario", "ejecutor")
                        .WithMany()
                        .HasForeignKey("ejecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaDeNegocio.Entidades.TipoDeMovimiento", "tipo")
                        .WithMany()
                        .HasForeignKey("tipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articulo");

                    b.Navigation("ejecutor");

                    b.Navigation("tipo");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: 20240618005903_masdatos.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Migrations\20240618005903_masdatos.cs
***********************************
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    /// <inheritdoc />
    public partial class masdatos : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 3, new DateTime(2024, 1, 3, 12, 0, 0), 3, 3, 3, 30 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 4, new DateTime(2024, 1, 4, 13, 0, 0), 4, 4, 4, 25 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 5, new DateTime(2024, 1, 5, 14, 0, 0), 5, 5, 5, 40 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 6, new DateTime(2024, 1, 6, 15, 0, 0), 6, 6, 6, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 7, new DateTime(2024, 1, 7, 16, 0, 0), 7, 1, 1, 10 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 8, new DateTime(2024, 1, 8, 17, 0, 0), 8, 2, 2, 20 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 9, new DateTime(2024, 1, 9, 18, 0, 0), 9, 3, 3, 5 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 10, new DateTime(2024, 1, 10, 19, 0, 0), 10, 4, 4, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 11, new DateTime(2024, 1, 11, 20, 0, 0), 11, 5, 5, 25 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 12, new DateTime(2024, 1, 12, 21, 0, 0), 12, 6, 6, 50 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 13, new DateTime(2024, 1, 13, 22, 0, 0), 13, 1, 1, 35 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 14, new DateTime(2024, 1, 14, 23, 0, 0), 14, 2, 2, 45 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 15, new DateTime(2024, 1, 15, 23, 0, 0), 15, 3, 3, 60 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 16, new DateTime(2024, 1, 16, 10, 0, 0), 16, 4, 4, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 17, new DateTime(2024, 1, 17, 11, 0, 0), 17, 5, 5, 25 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 18, new DateTime(2024, 1, 18, 12, 0, 0), 18, 6, 6, 40 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 19, new DateTime(2024, 1, 19, 13, 0, 0), 19, 1, 1, 10 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 20, new DateTime(2024, 1, 20, 14, 0, 0), 20, 2, 2, 25 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 21, new DateTime(2024, 1, 21, 15, 0, 0), 21, 3, 3, 20 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 22, new DateTime(2024, 1, 22, 16, 0, 0), 22, 4, 4, 30 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 23, new DateTime(2024, 1, 23, 17, 0, 0), 23, 5, 5, 35 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 24, new DateTime(2024, 1, 24, 18, 0, 0), 24, 6, 6, 50 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 25, new DateTime(2024, 1, 25, 19, 0, 0), 25, 1, 1, 20 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 26, new DateTime(2024, 1, 26, 20, 0, 0), 26, 2, 2, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 27, new DateTime(2024, 1, 27, 21, 0, 0), 27, 3, 3, 30 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 28, new DateTime(2024, 1, 28, 22, 0, 0), 28, 4, 4, 25 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 29, new DateTime(2024, 1, 29, 23, 0, 0), 29, 5, 5, 40 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 30, new DateTime(2024, 1, 30, 23, 0, 0), 30, 6, 6, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 31, new DateTime(2024, 1, 31, 10, 0, 0), 1, 1, 1, 20 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 32, new DateTime(2024, 2, 1, 11, 0, 0), 2, 2, 2, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 33, new DateTime(2024, 2, 2, 12, 0, 0), 3, 3, 3, 30 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 34, new DateTime(2024, 2, 3, 13, 0, 0), 4, 4, 4, 25 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 35, new DateTime(2024, 2, 4, 14, 0, 0), 5, 5, 5, 40 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 36, new DateTime(2024, 2, 5, 15, 0, 0), 6, 6, 6, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 37, new DateTime(2024, 2, 6, 16, 0, 0), 7, 1, 1, 10 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 38, new DateTime(2024, 2, 7, 17, 0, 0), 8, 2, 2, 20 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 39, new DateTime(2024, 2, 8, 18, 0, 0), 9, 3, 3, 5 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 40, new DateTime(2024, 2, 9, 19, 0, 0), 10, 4, 4, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 41, new DateTime(2024, 2, 10, 20, 0, 0), 11, 5, 5, 25 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 42, new DateTime(2024, 2, 11, 21, 0, 0), 12, 6, 6, 50 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 43, new DateTime(2024, 2, 12, 22, 0, 0), 13, 1, 1, 35 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 44, new DateTime(2024, 2, 13, 23, 0, 0), 14, 2, 2, 45 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 45, new DateTime(2024, 2, 14, 23, 0, 0), 15, 3, 3, 60 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 46, new DateTime(2024, 2, 15, 10, 0, 0), 16, 4, 4, 15 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 47, new DateTime(2024, 2, 16, 11, 0, 0), 17, 5, 5, 25 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 48, new DateTime(2024, 2, 17, 12, 0, 0), 18, 6, 6, 40 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 49, new DateTime(2024, 2, 18, 13, 0, 0), 19, 1, 1, 10 });
            migrationBuilder.InsertData("MovimientosDeStock", new[] { "Id", "fecha", "articuloId", "tipoId", "ejecutorId", "cantidad" }, new object[] { 50, new DateTime(2024, 2, 19, 14, 0, 0), 20, 2, 2, 25 });

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

***********************************
Archivo: 20240618005903_masdatos.Designer.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Migrations\20240618005903_masdatos.Designer.cs
***********************************
// <auto-generated />
using System;
using LogicaAccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(LibreriaContext))]
    [Migration("20240618005903_masdatos")]
    partial class masdatos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioDeVenta")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.MovimientoDeStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("articuloId")
                        .HasColumnType("int");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ejecutorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("tipoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("articuloId");

                    b.HasIndex("ejecutorId");

                    b.HasIndex("tipoId");

                    b.ToTable("MovimientosDeStock");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.TipoDeMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("aumentaStock")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TiposDeMovimiento");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Administrador", b =>
                {
                    b.HasBaseType("LogicaDeNegocio.Entidades.Usuario");

                    b.Property<bool>("ModificaUsuario")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Encargado", b =>
                {
                    b.HasBaseType("LogicaDeNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Encargado");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.MovimientoDeStock", b =>
                {
                    b.HasOne("LogicaDeNegocio.Entidades.Articulo", "articulo")
                        .WithMany()
                        .HasForeignKey("articuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaDeNegocio.Entidades.Usuario", "ejecutor")
                        .WithMany()
                        .HasForeignKey("ejecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaDeNegocio.Entidades.TipoDeMovimiento", "tipo")
                        .WithMany()
                        .HasForeignKey("tipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articulo");

                    b.Navigation("ejecutor");

                    b.Navigation("tipo");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: LibreriaContextModelSnapshot.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\Migrations\LibreriaContextModelSnapshot.cs
***********************************
// <auto-generated />
using System;
using LogicaAccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(LibreriaContext))]
    partial class LibreriaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioDeVenta")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.MovimientoDeStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("articuloId")
                        .HasColumnType("int");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ejecutorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("tipoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("articuloId");

                    b.HasIndex("ejecutorId");

                    b.HasIndex("tipoId");

                    b.ToTable("MovimientosDeStock");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.TipoDeMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("aumentaStock")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TiposDeMovimiento");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Administrador", b =>
                {
                    b.HasBaseType("LogicaDeNegocio.Entidades.Usuario");

                    b.Property<bool>("ModificaUsuario")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.Encargado", b =>
                {
                    b.HasBaseType("LogicaDeNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Encargado");
                });

            modelBuilder.Entity("LogicaDeNegocio.Entidades.MovimientoDeStock", b =>
                {
                    b.HasOne("LogicaDeNegocio.Entidades.Articulo", "articulo")
                        .WithMany()
                        .HasForeignKey("articuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaDeNegocio.Entidades.Usuario", "ejecutor")
                        .WithMany()
                        .HasForeignKey("ejecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaDeNegocio.Entidades.TipoDeMovimiento", "tipo")
                        .WithMany()
                        .HasForeignKey("tipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articulo");

                    b.Navigation("ejecutor");

                    b.Navigation("tipo");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: ObtenerArticulo.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\Articulos\ObtenerArticulo.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Articulos
{
    public class ObtenerArticulo : IObtener<Articulo>
    {
        IRepositorioArticulo _repositorioArticulo;
        public ObtenerArticulo(IRepositorioArticulo repositorioArticulo)
        {
            _repositorioArticulo = repositorioArticulo;
        }

        public Articulo Ejecutar(int id)
        {
            return _repositorioArticulo.GetById(id);
        }
    }
}

***********************************
Archivo: ObtenerArticulos.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\Articulos\ObtenerArticulos.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Articulos
{
    public class ObtenerArticulos : IObtenerTodos<Articulo>
    {
        IRepositorioArticulo _repositorioArticulo;
        public ObtenerArticulos(IRepositorioArticulo repositorioArticulos)
        {
            _repositorioArticulo = repositorioArticulos;
        }
        public IEnumerable<Articulo> Ejecutar()
        {
            return _repositorioArticulo.GetAll();
        }
    }
}

***********************************
Archivo: AltaMovimientoDeStock.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\AltaMovimientoDeStock.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.MovimientoDeStocks
{
    public class AltaMovimientoDeStock : IAlta<MovimientoDeStock>
    {
        IRepositorioMovimientoDeStock _repositorioMovimientoDeStock;
        public AltaMovimientoDeStock(IRepositorioMovimientoDeStock repositorioMovimientoDeStock)
        {
            _repositorioMovimientoDeStock = repositorioMovimientoDeStock;
        }

        public void Ejecutar(MovimientoDeStock movimientoDeStock)
        {
            _repositorioMovimientoDeStock.Add(movimientoDeStock);
        }
    }
}

***********************************
Archivo: CantidadDeMovimientos.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\CantidadDeMovimientos.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.MovimientoDeStocks
{
    public class CantidadDeMovimientos:IObtenerCantidadTotal<MovimientoDeStock>
    {
        IRepositorioMovimientoDeStock _repositorioMovimientos;
        public CantidadDeMovimientos(IRepositorioMovimientoDeStock repositorioMovimientos)
        {
            _repositorioMovimientos = repositorioMovimientos;
        }

        public int Ejecutar()
        {
            return _repositorioMovimientos.GetCount();
        }
    }
}

***********************************
Archivo: CantidadDeMovimientosConFiltros.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\CantidadDeMovimientosConFiltros.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.MovimientoDeStocks
{
    public class CantidadDeMovimientosConFiltros: IObtenerCantidadTotalDosFiltros<MovimientoDeStock>
    {
        IRepositorioMovimientoDeStock _repositorioMovimientos;
        public CantidadDeMovimientosConFiltros(IRepositorioMovimientoDeStock repositorioMovimientos)
        {
            _repositorioMovimientos = repositorioMovimientos;
        }

        public int Ejecutar(int idArticulo, int idTipo)
        {
            return _repositorioMovimientos.GetCountFiltro(idArticulo, idTipo);
        }
    }
}

***********************************
Archivo: CantidadDeMovimientosPorFecha.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\CantidadDeMovimientosPorFecha.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.MovimientoDeStocks
{
    public class CantidadDeMovimientosPorFecha:IObtenerCantidadPorFecha<Articulo>
    {
        IRepositorioMovimientoDeStock _repositorioMovimientos;
        public CantidadDeMovimientosPorFecha(IRepositorioMovimientoDeStock repositorioMovimientos)
        {
            _repositorioMovimientos = repositorioMovimientos;
        }

        public int Ejecutar(DateTime desde, DateTime hasta)
        {
            return _repositorioMovimientos.GetCountPorFecha(desde, hasta);
        }
    }
}

***********************************
Archivo: GetAllXArtTipoPag.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\GetAllXArtTipoPag.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.MovimientoDeStocks
{
    public class GetAllXArtTipoPag:IObtenerDosFiltros<MovimientoDeStock>
    {
        IRepositorioMovimientoDeStock _repositorioMovimientoDeStock;
        public GetAllXArtTipoPag(IRepositorioMovimientoDeStock repositorioMovimientoDeStock)
        {
            _repositorioMovimientoDeStock = repositorioMovimientoDeStock;
        }

        public IEnumerable<MovimientoDeStock> Ejecutar(int idArticulo, int idTipo, int page)
        {
            return _repositorioMovimientoDeStock.GetAllXArtTipoPagl(idArticulo,idTipo,page);
        }
    }
}

***********************************
Archivo: ObtenerMovimientoDeStock.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\ObtenerMovimientoDeStock.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.MovimientoDeStocks
{
    public class ObtenerMovimientoDeStock : IObtener<MovimientoDeStock>
    {
        IRepositorioMovimientoDeStock _repositorioMovimientoDeStock;
        public ObtenerMovimientoDeStock(IRepositorioMovimientoDeStock repositorioMovimientoDeStock)
        {
            _repositorioMovimientoDeStock = repositorioMovimientoDeStock;
        }

        public MovimientoDeStock Ejecutar(int id)
        {
            return _repositorioMovimientoDeStock.GetById(id);
        }
    }
}

***********************************
Archivo: ObtenerMovimientosDeStock.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\ObtenerMovimientosDeStock.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.MovimientoDeStocks
{
    public class ObtenerMovimientosDeStock : IObtenerTodosPaginado<MovimientoDeStock>
    {
        IRepositorioMovimientoDeStock _repositorioMovimientoDeStock;
        public ObtenerMovimientosDeStock(IRepositorioMovimientoDeStock repositorioMovimientoDeStock)
        {
            _repositorioMovimientoDeStock = repositorioMovimientoDeStock;
        }
        public IEnumerable<MovimientoDeStock> Ejecutar(int page)
        {
            return _repositorioMovimientoDeStock.GetAll(page);
        }
    }
}

***********************************
Archivo: ObtenerMovimientosPorFecha.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\ObtenerMovimientosPorFecha.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;


namespace LogicaAplicacion.MovimientoDeStocks
{
    public class ObtenerMovimientosPorFecha : IObtenerPorFecha<Articulo>
    {
        IRepositorioMovimientoDeStock _repositorioMovimientoDeStock;
        public ObtenerMovimientosPorFecha(IRepositorioMovimientoDeStock repositorioMovimientoDeStock)
        {
            _repositorioMovimientoDeStock = repositorioMovimientoDeStock;
        }
        public IEnumerable<Articulo> Ejecutar(DateTime desde, DateTime hasta, int page)
        {
            return _repositorioMovimientoDeStock.GetPorFecha(desde,hasta, page);
        }
    }
}

***********************************
Archivo: ObtenerResumen.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\MovimientoDeStocks\ObtenerResumen.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.MovimientoDeStocks
{
    public class ObtenerResumen:IObtenerResumen
    {
        IRepositorioMovimientoDeStock _repositorioMovimientoDeStock;
        public ObtenerResumen(IRepositorioMovimientoDeStock repositorioMovimientoDeStock)
        {
            _repositorioMovimientoDeStock = repositorioMovimientoDeStock;
        }
        public IEnumerable<Resultado> Ejecutar()
        {
            return _repositorioMovimientoDeStock.ResumenPorAnio();
        }
            
            
    }
}

***********************************
Archivo: AltaTipoDeMovimiento.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\TipoDeMovimientos\AltaTipoDeMovimiento.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.TipoDeMovimientos
{
    public class AltaTipoDeMovimiento : IAlta<TipoDeMovimiento>
    {
        IRepositorioTipoDeMovimiento _repositorioTiposDeMovimiento;
        public AltaTipoDeMovimiento(IRepositorioTipoDeMovimiento repositorioTiposDeMovimiento)
        {
            _repositorioTiposDeMovimiento = repositorioTiposDeMovimiento;
        }

        public void Ejecutar(TipoDeMovimiento tipoDeMovimiento)
        {
            _repositorioTiposDeMovimiento.Add(tipoDeMovimiento);
        }
    }
}

***********************************
Archivo: EditarTipoDeMovimiento.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\TipoDeMovimientos\EditarTipoDeMovimiento.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.TipoDeMovimientos
{
    public class EditarTipoDeMovimiento : IEditar<TipoDeMovimiento>
    {
        IRepositorioTipoDeMovimiento _repositorioTipoDeMovimiento;
        public EditarTipoDeMovimiento(IRepositorioTipoDeMovimiento repositorioTipoDeMovimiento)
        {
            _repositorioTipoDeMovimiento = repositorioTipoDeMovimiento;
        }

        public void Ejecutar(int id, TipoDeMovimiento obj)
        {
            _repositorioTipoDeMovimiento.Update(id, obj);
        }
    }
}

***********************************
Archivo: EliminarTipoDeMovimiento.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\TipoDeMovimientos\EliminarTipoDeMovimiento.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.TipoDeMovimientos
{
    public class EliminarTipoDeMovimiento : IEliminar<TipoDeMovimiento>
    {
        IRepositorioTipoDeMovimiento _repositorioTipoDeMovimiento;
        public EliminarTipoDeMovimiento(IRepositorioTipoDeMovimiento repositorioTipoDeMovimiento)
        {
            _repositorioTipoDeMovimiento = repositorioTipoDeMovimiento;
        }

        public void Ejecutar(int id)
        {
            _repositorioTipoDeMovimiento.Delete(id);
        }
    }
}

***********************************
Archivo: ObtenerTipoDeMovimiento.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\TipoDeMovimientos\ObtenerTipoDeMovimiento.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.TipoDeMovimientos
{
    public class ObtenerTipoDeMovimiento : IObtener<TipoDeMovimiento>
    {
		IRepositorioTipoDeMovimiento _repositorioTipoDeMovimiento;
        public ObtenerTipoDeMovimiento(IRepositorioTipoDeMovimiento repositorioTipoDeMovimiento)
        {
			_repositorioTipoDeMovimiento = repositorioTipoDeMovimiento;
        }

        public TipoDeMovimiento Ejecutar(int id)
        {
            return _repositorioTipoDeMovimiento.GetById(id);
        }
    }
}

***********************************
Archivo: ObtenerTiposDeMovimiento.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\TipoDeMovimientos\ObtenerTiposDeMovimiento.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.TipoDeMovimientos
{
    public class ObtenerTiposDeMovimiento:IObtenerTodos<TipoDeMovimiento>
    {
        IRepositorioTipoDeMovimiento _repositorioTipoDeMovimiento;
        public ObtenerTiposDeMovimiento(IRepositorioTipoDeMovimiento repositorioTipoDeMovimiento)
        {
            _repositorioTipoDeMovimiento = repositorioTipoDeMovimiento;
        }
        public IEnumerable<TipoDeMovimiento> Ejecutar()
        {
            return _repositorioTipoDeMovimiento.GetAll();
        }
    }
}

***********************************
Archivo: Login.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\Usuarios\Login.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Usuarios
{
    public class Login:ILogin<Usuario>
    {
        IRepositorioUsuario _repositorioUsuario;
        public Login(IRepositorioUsuario repositorioUsuario)
        {
            _repositorioUsuario = repositorioUsuario;
        }
        public Usuario Ejecutar(string email, string password)
        {
            //password = PasswordHasher.HashPassword(password); ya viene pronto
            return _repositorioUsuario.Login(email, password);
        }
    }
}

***********************************
Archivo: ObtenerDeEmail.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\Usuarios\ObtenerDeEmail.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Usuarios
{
    public class ObtenerDeEmail:IObtenerDeString<Usuario>
    {
        IRepositorioUsuario _repositorioUsuarios;
        public ObtenerDeEmail(IRepositorioUsuario repositorioUsuario)
        {
            _repositorioUsuarios = repositorioUsuario;
        }
        public Usuario Ejecutar(string email)
        {
            return _repositorioUsuarios.GetByEmail(email);
        }
    }
}

***********************************
Archivo: ObtenerUsuario.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\Usuarios\ObtenerUsuario.cs
***********************************
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Usuarios
{
    public class ObtenerUsuario:IObtener<Usuario>
    {
        IRepositorioUsuario _repositorioUsuarios;
        public ObtenerUsuario(IRepositorioUsuario repositorioUsuario)
        {
            _repositorioUsuarios = repositorioUsuario;
        }
        public Usuario Ejecutar(int id)
        {
            return _repositorioUsuarios.GetById(id);
        }
    }
}

***********************************
Archivo: PasswordHasher.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAplicacion\Usuarios\PasswordHasher.cs
***********************************
using System;
using System.Security.Cryptography;
using System.Text;

public class PasswordHasher
{
    public static string HashPassword(string password)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(password));

            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}

***********************************
Archivo: ArticulosController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApi\Controllers\ArticulosController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ArticulosController : ControllerBase
    {
        IObtenerTodos<Articulo> _obtenerTodos;

        public ArticulosController(IObtenerTodos<Articulo> obtenerTodos)
        {
            _obtenerTodos = obtenerTodos;
        }
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpGet]
        public IActionResult GetAll()
        {
            try
            {
                return Ok(_obtenerTodos.Ejecutar());
            }
            catch (RepositorioException)
            {
                return StatusCode(StatusCodes.Status204NoContent);
            }
            catch (Exception e)
            {
                return StatusCode(500, "Hupp" + e.Message);
            }
        }
    }
}

***********************************
Archivo: MovimientoDeStockController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApi\Controllers\MovimientoDeStockController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.Excepciones;
using LogicaDeNegocio.Excepciones.MovimientoDeStock;
using LogicaDeNegocio.IntefacesServicios;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MovimientoDeStockController : ControllerBase
    {
        private IObtenerCantidadTotal<MovimientoDeStock> _cantidadDeMovimientos;
        private IAlta<MovimientoDeStock> _altaMovimiento;
        private IObtener<MovimientoDeStock> _obtenerMovimiento;
        private IObtenerTodosPaginado<MovimientoDeStock> _obtenerTodos;
        private IObtenerDosFiltros<MovimientoDeStock> _getAllXArtTipoPag;
        private IObtenerCantidadTotalDosFiltros<MovimientoDeStock> _cantidadDosFiltros;
        private IObtener<Articulo> _obtenerArticulo;
        private IObtener<TipoDeMovimiento> _obtenerTipo;
        private IObtenerDeString<Usuario> _obtenerUsuarioDesdeEmail;
        private IObtenerPorFecha<Articulo> _obtenerMovimientosPorFecha;
        private IObtenerCantidadPorFecha<Articulo> _cantidadPorFecha;
        private IObtenerResumen _obtenerResumen;

        public MovimientoDeStockController(IAlta<MovimientoDeStock> alta,
                                  IObtener<MovimientoDeStock> obtenerMovimiento,
                                  IObtenerTodosPaginado<MovimientoDeStock> obtenerTodos,
                                  IObtenerDosFiltros<MovimientoDeStock> getAllXArtTipoPag,
                                  IObtener<Articulo> obtenerArticulo,
                                  IObtener<TipoDeMovimiento> obtenerTipo,
                                  IObtener<Usuario> obtenerUsuario,
                                  IObtenerDeString<Usuario> obtenerUsuarioDesdeEmail,
                                  IObtenerPorFecha<Articulo> obtenerMovimientosPorFecha,
                                  IObtenerCantidadTotal<MovimientoDeStock> cantidadDeMovimientos,
                                  IObtenerCantidadTotalDosFiltros<MovimientoDeStock> cantidadDosFiltros,
                                  IObtenerCantidadPorFecha<Articulo> cantidadPorFecha,
                                  IObtenerResumen obtenerResumen)
        {
            _altaMovimiento = alta;
            _obtenerMovimiento = obtenerMovimiento;
            _obtenerTodos = obtenerTodos;
            _getAllXArtTipoPag = getAllXArtTipoPag;
            _obtenerArticulo = obtenerArticulo;
            _obtenerTipo = obtenerTipo;
           // _obtenerUsuario = obtenerUsuario;
            _obtenerUsuarioDesdeEmail = obtenerUsuarioDesdeEmail;
            _obtenerMovimientosPorFecha = obtenerMovimientosPorFecha;
            _cantidadDeMovimientos = cantidadDeMovimientos;
            _cantidadDosFiltros = cantidadDosFiltros;
            _cantidadPorFecha = cantidadPorFecha;
            _obtenerResumen = obtenerResumen;
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpGet]
        public IActionResult GetAll(int page)
        {
            try
            {
                return Ok(_obtenerTodos.Ejecutar(page));

            }
            catch (NotFoundException e)
            {
                return StatusCode(204, e.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpGet("GetResumen")]
        public IActionResult GetResumen()
        {
            try
            {
                return Ok(_obtenerResumen.Ejecutar());
            }
            catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpGet("GetCount")]
        public IActionResult GetCount()
        {
            try
            {
                return Ok(_cantidadDeMovimientos.Ejecutar());
            }catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpGet("GetCountDosFiltros")]
        public IActionResult GetCountDosFiltros(int idArticulo, int idTipo)
        {
            try
            {
                return Ok(_cantidadDosFiltros.Ejecutar(idArticulo, idTipo));
            }
            catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpGet("GetCountPorFecha")]
        public IActionResult GetCountPorFecha(string desdestr, string hastastr)
        {
            try
            {
                var desde = DateTime.MinValue;
                var hasta = DateTime.MinValue;
                var okd = DateTime.TryParse(desdestr, out desde);
                var okh = DateTime.TryParse(hastastr, out hasta);

                return Ok(_cantidadPorFecha.Ejecutar(desde, hasta));
            }
            catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            try
            {
                return Ok(_obtenerMovimiento.Ejecutar(id));
            }
            catch (ArgumentNullRepositorioException e)
            {
                return StatusCode(400, e.Message);
            }
            catch (NotFoundException e)
            {
                return StatusCode(404, e.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }

        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpPost]
        public IActionResult Create(MovimientoDeStockDto unMovimiento)
        {
            try
            {
                if (unMovimiento == null)
                {
                    throw new ArgumentException("Los valores enviados son incorrectos");
                }
                if (unMovimiento.articuloId == null)
                {
                    throw new ArticuloDeMovimientoInvalidoException();
                }
                if (unMovimiento.ejecutorEmail == null)
                {
                    throw new RolUsuarioInvalidoException();
                }
                if (unMovimiento.cantidad == null||unMovimiento.cantidad>ParametrosGenerales.cantMaxPorMovimiento||unMovimiento.cantidad<=0)
                {
                    throw new CantidadInvalidaException();
                }
                MovimientoDeStock movimiento = new MovimientoDeStock()
                {
                    articulo = _obtenerArticulo.Ejecutar(unMovimiento.articuloId),
                    tipo = _obtenerTipo.Ejecutar(unMovimiento.tipoId),
                    cantidad = unMovimiento.cantidad,
                    ejecutor = _obtenerUsuarioDesdeEmail.Ejecutar(unMovimiento.ejecutorEmail),
                };
                if(movimiento.ejecutor.Discriminator != "Encargado")
                {
                    throw new RolUsuarioInvalidoException();
                }
                movimiento.Validar();
                _altaMovimiento.Ejecutar(movimiento);
                return StatusCode(201);
            }
            catch (ArgumentException e)
            {
                return StatusCode(400, e.Message);
            }
            catch (DominioExcpetion e)
            {
                return StatusCode(400, e.Message);
            }
            catch (RepositorioException e)
            {
                return StatusCode(400, e.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "Contactese con el administrador");
            }
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpGet]
        [Route("FiltroXArtTipoPag")]
        public IActionResult FiltroXArtTipoPag(int idArticulo, int idTipo, int page)
        {
            try
            {
                return Ok(_getAllXArtTipoPag.Ejecutar(idArticulo, idTipo, page));
            }
            catch (NotFoundException e)
            {
                return StatusCode(204, e.Message);
            }
            catch (ArgumentNullRepositorioException e)
            {
                return StatusCode(204, e.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize]
        [HttpGet]
        [Route("FiltroXFecha")]
        public IActionResult GetPorFecha(string desdestr, string hastastr, int page)
        {
            try
            {
                var desde = DateTime.MinValue;
                var hasta = DateTime.MinValue;
                var okd = DateTime.TryParse(desdestr, out desde);
                var okh = DateTime.TryParse(hastastr, out hasta);
                return Ok(_obtenerMovimientosPorFecha.Ejecutar(desde, hasta, page));
            }
            catch (NotFoundException e)
            {
                return StatusCode(204, e.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }
    }
}

***********************************
Archivo: TipoDeMovimientoController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApi\Controllers\TipoDeMovimientoController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.Excepciones;
using LogicaDeNegocio.IntefacesServicios;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TipoDeMovimientoController : ControllerBase
    {
        private IAlta<TipoDeMovimiento> _altaTipoDeMovimiento;
        private IEliminar<TipoDeMovimiento> _eliminarTipoDeMovimiento;
        private IEditar<TipoDeMovimiento> _editarTipoDeMovimiento;
        private IObtener<TipoDeMovimiento> _obtenerTipoDeMovimiento;
        private IObtenerTodos<TipoDeMovimiento> _obtenerTiposDeMovimiento;
        public TipoDeMovimientoController(
            IAlta<TipoDeMovimiento> altaTipoDeMovimiento,
            IEliminar<TipoDeMovimiento> eliminarTipoDeMovimiento,
            IEditar<TipoDeMovimiento> editarTipoDeMovimiento,
            IObtener<TipoDeMovimiento> obtenerTipoDeMovimiento,
            IObtenerTodos<TipoDeMovimiento> obtenerTiposDeMovimiento
            )
        {
            _altaTipoDeMovimiento = altaTipoDeMovimiento;
            _eliminarTipoDeMovimiento = eliminarTipoDeMovimiento;
            _editarTipoDeMovimiento = editarTipoDeMovimiento;
            _obtenerTipoDeMovimiento = obtenerTipoDeMovimiento;
            _obtenerTiposDeMovimiento = obtenerTiposDeMovimiento;
        }

        /// <summary>
        /// Servicio que brinda todos los tipos de movimientos
        /// </summary>
        /// <remarks>
        /// Ejemplo de retorno
        /// {
        ///   [
        ///{
        ///  "id": 1,
        ///  "nombre": "Compra",
        ///  "aumentaStock": true
        ///},
        ///{
        ///  "id": 2,
        ///  "nombre": "Venta",
        ///  "aumentaStock": false
        ///}]
        ///   
        /// },
        /// </remarks>
        /// <returns>Una lista con todos los tipos de movimiento</returns>
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpGet]
        public IActionResult GetAll()
        {
            try
            {
                return Ok(_obtenerTiposDeMovimiento.Ejecutar());

            } catch (NotFoundException e)
            {
                return StatusCode(204, e.Message);
            } catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }

        /// <summary>
        /// Servicio que brinda un tipo de movimiento
        /// </summary>
        /// <remarks>
        /// Ejemplo de retorno
        ///{
        ///  "id": 1,
        ///  "nombre": "Compra",
        ///  "aumentaStock": true
        ///}
        /// </remarks>
        /// <returns>El tipo de movimiento segun el id ingresado</returns>
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            try
            {
                return Ok(_obtenerTipoDeMovimiento.Ejecutar(id));
            } catch (ArgumentNullRepositorioException e)
            {
                return StatusCode(400, e.Message);
            } catch (NotFoundException e)
            {
                return StatusCode(404, e.Message);
            } catch (Exception)
            {
                return StatusCode(500, "Contacte al administrador");
            }
        }

        /// <summary>
        /// Servicio que Crea un tipo de movimiento
        /// </summary>
        /// <remarks>
        /// Ejemplo de retorno
        /// {
        ///  No hay retorno  
        /// }
        /// </remarks>
        /// <returns>StatusCode 201</returns>
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpPost]
        public IActionResult Create(TipoDeMovimiento UnTipo)
        {
            try
            {
                if (UnTipo == null)
                {
                    throw new ArgumentException("Los valores enviados son incorrectos");
                }
                UnTipo.Validar();
                _altaTipoDeMovimiento.Ejecutar(UnTipo);
                return StatusCode(201);
            }
            catch (ArgumentException e)
            {
                return StatusCode(400, e.Message);
            }
            catch (DominioExcpetion e)
            {
                return StatusCode(400, e.Message);
            }
            catch (RepositorioException e)
            {
                return StatusCode(400, e.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "Contactese con el administrador");
            }
        }

        /// <summary>
        /// Servicio que Elimina un tipo de movimiento
        /// </summary>
        /// <remarks>
        /// Ejemplo de retorno
        /// {
        ///  No hay retorno  
        /// }
        /// Solo elimina tipos de movimiento que no tengan un movimiento registrado
        /// </remarks>
        /// <returns>StatusCode 201</returns>
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            try
            {
                _eliminarTipoDeMovimiento.Ejecutar(id);
                return StatusCode(201);
            }
            catch (RepositorioException e)
            {
                return StatusCode(400, e.Message);
            } catch (Exception)
            {
                return StatusCode(500, "Contactese con el administrador");
            }
        }


    /// <summary>
    /// Servicio que Modifica un tipo de movimiento
    /// </summary>
    /// <remarks>
    /// Ejemplo de retorno
    /// {
    ///  No hay retorno  
    /// }
    /// Solicita el id del registro a modificar y los siguientes datos:
    /// {
    /// "id": 0,
    /// "nombre": "string",
    /// "aumentaStock": true
    /// }
    /// </remarks>
    /// <returns>StatusCode 200</returns>
    [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpPut("{id}")]
        public IActionResult Edit(int id, TipoDeMovimiento tipo)
        {
            try
            {
                _editarTipoDeMovimiento.Ejecutar(id, tipo);
                return StatusCode(200);
            }
            catch (DominioExcpetion e)
            {
                return StatusCode(400, e.Message);
            }
            catch (RepositorioException e)
            {
                return StatusCode(400, e.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "Contactese con el administrador");
            }
        }
    }
}

***********************************
Archivo: UsuarioController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApi\Controllers\UsuarioController.cs
***********************************
using LogicaAplicacion.Usuarios;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UsuarioController : ControllerBase
    {
        private ILogin<Usuario> _login;

        public UsuarioController(ILogin<Usuario> login)
        {
            _login = login;
        }
        [HttpPost]
        public IActionResult Token(UserDto dto)
        {
            try
            {
                Usuario usuario = _login.Ejecutar(dto.Email, dto.Pass);
                var token = ManejadorJwt.GenerarToken(usuario);
                return Ok(token);
            }catch (Exception)
            {
                return BadRequest("Los datos recibidos no son correctos");
            }
        }
        [HttpPost]
        [Route("Login")]
        public IActionResult Login(UserDto dto)
        {
            try
            {
                Usuario usuario = _login.Ejecutar(dto.Email, dto.Pass);
                return Ok(usuario);
            }
            catch (Exception)
            {
                return BadRequest("Los datos recibidos no son correctos");
            }
        }
    }
}

***********************************
Archivo: ArticuloController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Controllers\ArticuloController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaAplicacion.Administradores;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.Excepciones;
using LogicaDeNegocio.Excepciones.Articulo;
using LogicaDeNegocio.IntefacesServicios;
using Microsoft.AspNetCore.Mvc;
using System.Linq;
using WebApp.Filter;

namespace WebApp.Controllers
{
    public class ArticuloController : Controller
    {
        IObtenerTodos<Articulo> _obtenerTodos;
        IObtener<Articulo> _obtenerArticulo;
        IAlta<Articulo> _altaArticulo;
        IEliminar<Articulo> _eliminarArticulo;
        IEditar<Articulo> _editarArticulo;
        public ArticuloController(IObtenerTodos<Articulo> obtenerTodos,
                                    IObtener<Articulo> obtenerArticulo,
                                    IAlta<Articulo> altaArticulo,
                                    IEliminar<Articulo> eliminarArticulo,
                                    IEditar<Articulo> editarArticulo)
        {
            _obtenerTodos = obtenerTodos;
            _obtenerArticulo = obtenerArticulo;
            _altaArticulo = altaArticulo;
            _eliminarArticulo = eliminarArticulo;
            _editarArticulo = editarArticulo;
        }

        [Admin]
        public IActionResult Index(string mensaje)
        {
            ViewBag.Mensaje = mensaje;
            return View(_obtenerTodos.Ejecutar());
        }
        [Admin]
        public IActionResult Create()
        {
            return View();
        }
        [Admin]
        [HttpPost]
        public IActionResult Create(Articulo UnArticulo)
        {
            try
            {
                if(UnArticulo == null)
                {
                    throw new ArgumentException("Los valores enviados son incorrectos");
                }
                UnArticulo.Validar();
                _altaArticulo.Ejecutar(UnArticulo);
                return RedirectToAction("Index", new {mensaje = "Se dio de alta el articulo"});
            }
            catch (DominioExcpetion e)
            {
                ViewBag.mensaje = e.Message;
            }
            catch (RepositorioException e)
            {
                ViewBag.mensaje = e.Message;
            }
            catch (Exception )
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador.";
            }
            return View("Create");
        }
        [Admin]
        public IActionResult Delete(int id)
        {
            try
            {
                _eliminarArticulo.Ejecutar(id);
                ViewBag.mensaje = "Eliminado con exito.";
            }
            catch
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador.";
            }
            return RedirectToAction("Index", new { mensaje = ViewBag.mensaje } );
        }
        [Admin]
        public IActionResult Edit(int id)
        {
            try
            {
                Articulo art = _obtenerArticulo.Ejecutar(id);
                return View(art);
            }
            catch (DominioExcpetion ex)
            {
                return RedirectToAction("Index", new { mensaje = ex.Message });
            }
            catch (RepositorioException ex)
            {
                return RedirectToAction("Index", new { mensaje = ex.Message });
            }
            catch (Exception)
            {
                return RedirectToAction("Index", new { mensaje = "Hubo un error, contactese con el administrador." });
            }
        }
        [Admin]
        [HttpPost]
        public IActionResult Edit(int id, Articulo art)
        {
            try
            {
                _editarArticulo.Ejecutar(id, art);
                return RedirectToAction("Index", new { mensaje = "Articulo modificado con exito." });
            }
            catch (DominioExcpetion ex)
            {
                ViewBag.mensaje = ex.Message;
            }
            catch (RepositorioException ex)
            {
                ViewBag.mensaje = ex.Message;
            }
            catch (Exception)
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador.";
            }
            return View(art);
        }
    }
}

***********************************
Archivo: ClienteController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Controllers\ClienteController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Dtos;
using LogicaDeNegocio.IntefacesServicios;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using Microsoft.CodeAnalysis.Elfie.Serialization;
using WebApp.Filter;

namespace WebApp.Controllers
{
    public class ClienteController : Controller
    {
        IObtenerTodos<ClienteDto> _obtenerClientesDto;
        IObtenerFiltroString<ClienteDto> _obtenerClientesXRazonSocial;
        IObtenerFiltroInt<ClienteDto> _obtenerClientesXMonto;

        public ClienteController(IObtenerTodos<ClienteDto> obtenerTodos,
            IObtenerFiltroString<ClienteDto> obtenerClientesXRazonSocial,
            IObtenerFiltroInt<ClienteDto> obtenerClientesXMonto)
        {
            _obtenerClientesDto = obtenerTodos;
            _obtenerClientesXRazonSocial = obtenerClientesXRazonSocial;
            _obtenerClientesXMonto = obtenerClientesXMonto;
        }
        [Admin]
        public IActionResult Index(string mensaje)
        {
            ViewBag.mensaje= mensaje;
            return View(_obtenerClientesDto.Ejecutar());
        }

        [Admin]
        public IActionResult FiltroXRazonSocial(string filtro)
        {
            try
            {
            if (filtro != null)
            {
               ViewBag.filtroRazonSocial= filtro;
               return View("Index", _obtenerClientesXRazonSocial.Ejecutar(filtro));
            }
            return RedirectToAction("Index");

            }
            catch (RepositorioException ex)
            {
                return RedirectToAction("Index", new { mensaje = ex.Message });
            }
            catch (Exception)
            {
                return RedirectToAction("Index", new { mensaje = "Hubo un error, contacte al administrador." });
            }
        }
        [Admin] 
        public IActionResult FiltroXMonto(int filtro)
        {
            try
            {
                if (filtro >= 0)
                {
                    ViewBag.filtroXMonto = filtro;
                }
                return View("Index", _obtenerClientesXMonto.Ejecutar(filtro));

            }
            catch (RepositorioException ex)
            {
                return RedirectToAction("Index", new { mensaje = ex.Message });
            }
            catch (Exception)
            {
                return RedirectToAction("Index", new { mensaje = "Hubo un error, contacte al administrador." });
            }
        }
    }
}

***********************************
Archivo: IndexController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Controllers\IndexController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaAplicacion.Administradores;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.IntefacesServicios;
using Microsoft.AspNetCore.Mvc;
using WebApp.Filter;

namespace WebApp.Controllers
{
    public class IndexController : Controller
    {

        ILogin<Usuario> _login;
        //IAlta<Usuario> _altaUsuario; //1er ejecucion necesario debido al hash

        public IndexController(ILogin<Usuario> login
                               //, IAlta<Usuario> altaUsuario //1er ejecucion hasta obtener Hash e incorporarlo en la migracion
                               )
        {
            _login = login;
            // _altaUsuario = altaUsuario;//1er ejecucion
            // _altaUsuario.Ejecutar(new Administrador(true, "fran@mail.com", "Asd123!", "fran", "kell")); //1er ejecucion

        }
        [Admin]
        public IActionResult Index()
        {
            return View();
        }
        [Admin]
        public IActionResult Logout()
        {
            HttpContext.Session.Clear();
            return View("Login");
        }
        public IActionResult Login()
        {
            return View();
        }
        [HttpPost]
        public IActionResult Login(string Email, string Password)
        {

            try
            {
                Usuario unU = _login.Ejecutar(Email, Password);

                if (unU is Administrador)
                {
                    HttpContext.Session.SetString("rol", "Admin");
                    Administrador administrador = unU as Administrador;
                    if (administrador.ModificaUsuario)
                    {
                        HttpContext.Session.SetString("super", "True");
                    }

                    HttpContext.Session.SetString("Nombre", unU.Nombre);

                    return Redirect("/Index/Index");
                }
            }
            catch (LoginException e)
            {
                ViewBag.mensaje = e.Message;
                
            }
            catch (Exception)
            {
                ViewBag.mensaje = "Hubo un inconveniente, contactese con el administrador.";
            }
            
            return View("Login");
        }
        
    }
}

***********************************
Archivo: PedidoController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Controllers\PedidoController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaAplicacion.Articulos;
using LogicaDeNegocio.Dtos;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.Excepciones;
using LogicaDeNegocio.IntefacesServicios;
using LogicaDeNegocio.InterfacesRepositorio;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ApplicationParts;
using Microsoft.CodeAnalysis.FlowAnalysis.DataFlow;
using System.ComponentModel;
using WebApp.Filter;

namespace WebApp.Controllers
{
    public class PedidoController : Controller
    {
        IObtenerTodos<PedidoDto> _obtenerPedidos;
        IObtener<PedidoDto> _obtenerPedido;
        IObtenerTodos<Articulo> _obtenerArticulos;
        IObtener<Articulo> _obtenerArticulo;
        IAlta<PedidoDto> _altaPedido;
        IObtenerTodos<ClienteDto> _obtenerClientes;
        IObtener<ClienteDto> _obtenerCliente;
        IObtenerAanular<PedidoDto> _obtenerPedidosAanular;
        IAnularPedido _anularPedido;
        static List<ArticuloPedido> compras = new List<ArticuloPedido>();
        public PedidoController(IObtenerTodos<PedidoDto> pedidos, 
                                IObtener<PedidoDto> obtenerPedido,
                                IObtenerTodos<Articulo> obtenerArticulos,
                                IObtener<Articulo> obtenerArticulo,
                                IAlta<PedidoDto> altaPedido,
                                IObtenerTodos<ClienteDto> obtenerClientes,
                                IObtener<ClienteDto> obtenerCliente,
                                IObtenerAanular<PedidoDto> obtenerPedidosAanular,
                                IAnularPedido anularPedido)
        {
            _obtenerPedidos = pedidos;
            _obtenerPedido = obtenerPedido;
            _obtenerArticulos = obtenerArticulos;
            _obtenerArticulo = obtenerArticulo;
            _altaPedido = altaPedido;
            _obtenerClientes = obtenerClientes;
            _obtenerCliente = obtenerCliente;
            _obtenerPedidosAanular = obtenerPedidosAanular;
            _anularPedido = anularPedido;
        }
        [Admin]
        public IActionResult Index(string mensaje, string color)
        {
            ViewBag.Mensaje = mensaje;
            ViewBag.Color = color;
            return View(_obtenerPedidos.Ejecutar());
        }
        [Admin]
        public IActionResult ElegirArticulos(string mensaje, string color) 
        {
            ViewBag.Mensaje= mensaje;
            ViewBag.Color = color;
            ViewBag.Lista=compras;
            return View(_obtenerArticulos.Ejecutar());
        }
        [Admin]
        public IActionResult Agregar(int id, int cantidad)
        {
            try
            {
                for (int i = 0; i < compras.Count; i++)
                {
                    if (compras[i].Articulo.Id == id)
                    {
                        return RedirectToAction("ElegirArticulos", new { mensaje = "No puede elegir mas de 1 vez el mismo articulo" , color = "alert alert-danger"});
                    }
                }
                Articulo art = _obtenerArticulo.Ejecutar(id);
                ArticuloPedido item = new ArticuloPedido(art,cantidad);
                item.Validar();
                compras.Add(item);
                ViewBag.Mensaje = "Articulo agregado con exito";
                ViewBag.Color = "alert alert-success";
                ViewBag.Lista = compras;
                return View("ElegirArticulos", _obtenerArticulos.Ejecutar());

            }catch(RepositorioException ex)
            {
                return RedirectToAction("ElegirArticulos", new { mensaje = ex.Message, color = "alert alert-danger" });
            }
            catch (DominioExcpetion ex)
            {
                return RedirectToAction("ElegirArticulos", new { mensaje = ex.Message, color = "alert alert-danger" });
            }
            catch (Exception)
            {
                return RedirectToAction("ElegirArticulos", new { mensaje = "Hubo un error, contactese con el administrador", color = "alert alert-danger" });
            }
        }
        [Admin]
        public IActionResult Cancel()
        {
            compras.Clear();
            return RedirectToAction("Index", new {mensaje = "Pedido cancelado", color = "alert alert-danger" });
        }
        [Admin]
        public IActionResult DeleteLinea(int idArt, int cantidad)
        {
            try
            {
                for (int i = 0; i < compras.Count ; i++)
                {
                    ArticuloPedido compra = compras[i];
                    if (compra.Articulo.Id == idArt && compra.Cantidad==cantidad)
                    {
                        compras.Remove(compras[i]);
                        ViewBag.Mensaje = "Se quito el articulo de la lista";
                        ViewBag.Color = "alert alert-succes";
                        i = compras.Count;
                    }
                }
                ViewBag.Lista = compras;
                return View("ElegirArticulos", _obtenerArticulos.Ejecutar());
            }
            catch(Exception)
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador.";
            }
            return RedirectToAction("Index", new { mensaje = ViewBag.mensaje, color = "alert alert-danger" });
        }
        [Admin]
        [HttpGet]
        public IActionResult Create(string mensaje, string color)
        {
            if (compras.Count == 0)
            {
                return RedirectToAction("ElegirArticulos", new { mensaje = "No tiene articulos seleccionados", color = "alert alert-danger" });
            }
            ViewBag.mensaje = mensaje;
            ViewBag.color = color;
            ViewBag.clientes=_obtenerClientes.Ejecutar();
            return View();
        }
        [Admin]
        [HttpPost]
        public IActionResult Create(PedidoDto pedidoDto)
        {

            try { 
            PedidoDto nuevoPedidoDto = new PedidoDto(0,pedidoDto.fechaDeEntrega,DateTime.Now,pedidoDto.precio, pedidoDto.recargo,pedidoDto.iva,pedidoDto.idCliente,pedidoDto.nombreCliente,compras,false,pedidoDto.esExpress);
            _altaPedido.Ejecutar(nuevoPedidoDto);
            compras.Clear();
            return RedirectToAction("Index", new { mensaje = "Pedido agregado con exito", color = "alert alert-success" });
            }
            catch (RepositorioException ex)
            {
                return RedirectToAction("Create", new { mensaje = ex.Message, color = "alert alert-danger" });
            }
            catch (DominioExcpetion ex)
            {
                return RedirectToAction("Create", new { mensaje = ex.Message, color = "alert alert-danger" });
            }
            catch (Exception)
            {
                return RedirectToAction("Create", new { mensaje = "Hubo un error, contactese con el administrador", color = "alert alert-danger" });
            }
        }

        [Admin]
        public IActionResult PedidosAanular()
        {
            return View();
        }
        [Admin]
        [HttpPost]
        public IActionResult PedidosAanular(DateTime fechaPedido)
        {
            try
            {
            return View(_obtenerPedidosAanular.Ejecutar(fechaPedido));

            }
            catch (RepositorioException ex)
            {
                ViewBag.mensaje = ex.Message;
                ViewBag.color = "alert alert-danger";
                return View();
            }
            catch (DominioExcpetion ex)
            {
                ViewBag.mensaje = ex.Message;
                ViewBag.color = "alert alert-danger";
                return View();
            }
            catch (Exception)
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador";
                ViewBag.color = "alert alert-danger";
                return View();
            }
        }
        [Admin]
        public IActionResult Anular(int id)
        {
            try
            {
            _anularPedido.Ejecutar(id);
            
            ViewBag.mensaje = "Pedido anulado con exito";
            ViewBag.color = "alert alert-success";
            return View("PedidosAanular");
            }
            catch (RepositorioException ex)
            {
                ViewBag.mensaje = ex.Message;
                ViewBag.color = "alert alert-danger";
                return View("PedidosAanular");
            }
            catch (DominioExcpetion ex)
            {
                ViewBag.mensaje = ex.Message;
                ViewBag.color = "alert alert-danger";
                return View("PedidosAanular");
            }
            catch (Exception)
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador";
                ViewBag.color = "alert alert-danger";
                return View("PedidosAanular");
            }
        }

    }
}

***********************************
Archivo: UsuarioController.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Controllers\UsuarioController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaDeNegocio.Entidades;
using LogicaDeNegocio.Excepciones;
using LogicaDeNegocio.IntefacesServicios;
using Microsoft.AspNetCore.Mvc;
using WebApp.Filter;
using WebApp.Models;

namespace WebApp.Controllers
{
    public class UsuarioController : Controller
    {
        IAlta<Usuario> _altaUsuario;
        IEditar<Usuario> _editarUsuario;
        IEliminar<Usuario> _eliminarUsuario;
        IObtener<Usuario> _obtenerUsuario;
        IObtenerTodos<Usuario> _obtenerUsuarios;


        IObtener<Administrador> _obtenerAdministrador;
        IEditar<Administrador> _editarAdministrador;
        IObtenerTodos<Administrador> _obtenerAdministradores;

        public UsuarioController(IAlta<Usuario> altaUsuario,
            IEditar<Usuario> editarUsuario,
            IEliminar<Usuario> eliminarUsuario,
            IObtener<Usuario> obtenerUsuario,
            IObtenerTodos<Usuario> obtenerUsuarios,


            IObtener<Administrador> obtenerAdministrador,
            IEditar<Administrador> editarAdministrador,
            IObtenerTodos<Administrador> obtenerAdministradores)
        {
            _altaUsuario = altaUsuario;
            _editarUsuario = editarUsuario;
            _eliminarUsuario = eliminarUsuario;
            _obtenerUsuario = obtenerUsuario;
            _obtenerUsuarios = obtenerUsuarios;


            _obtenerAdministrador = obtenerAdministrador;
            _editarAdministrador = editarAdministrador;
            _obtenerAdministradores = obtenerAdministradores;

        }
        [Admin]
        public IActionResult AdminIndex(string mensaje)
        {
            ViewBag.Mensaje = mensaje;

            return View(_obtenerAdministradores.Ejecutar());
        }
        public IActionResult AdminCreate()
        {
            return View();
        }
        [Admin]
        [HttpPost]
        public IActionResult AdminCreate(Administrador administrador)
        {
            try
            {
                administrador.Validar();
                _altaUsuario.Ejecutar(administrador);
                return RedirectToAction("AdminIndex", new { mensaje = "Admin creado con exito." });
            }
            catch (DominioExcpetion ex)
            {
                ViewBag.mensaje = ex.Message;
            }
            catch (RepositorioException ex)
            {
                ViewBag.mensaje = ex.Message;
            }
            catch (Exception)
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador.";
            }
            return View(administrador);
        }
        [Admin]
        public IActionResult AdminDelete(int id)
        {
            try
            {
                Administrador admin = _obtenerAdministrador.Ejecutar(id);
                return View(admin);
            }
            catch (DominioExcpetion ex)
            {
                return RedirectToAction("AdminIndex", new { mensaje = ex.Message });
            }
            catch (RepositorioException ex)
            {
                return RedirectToAction("AdminIndex", new { mensaje = ex.Message });
            }
            catch (Exception)
            {
            return RedirectToAction("AdminIndex", new { mensaje = "Hubo un error, contactese con el administrador." } );
            }

        }
        [Admin]
        [HttpPost]
        public IActionResult AdminDelete(Administrador admin)
        {
            try
            {
                _eliminarUsuario.Ejecutar(admin.Id);
                return RedirectToAction("AdminIndex", new {mensaje = "Administrador eliminado con exito."});
            }
            catch (DominioExcpetion ex)
            {
                ViewBag.mensaje = ex.Message;
            }
            catch (RepositorioException ex)
            {
                ViewBag.mensaje = ex.Message;
            }
            catch (Exception)
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador.";
            }
            return View(admin);
        }
        [AdminAutorizado]
        public IActionResult AdminEdit(int id)
        {
            try
            {
                Administrador admin = _obtenerAdministrador.Ejecutar(id);
                return View(admin);
            }
            catch (DominioExcpetion ex)
            {
                return RedirectToAction("AdminIndex", new { mensaje = ex.Message });
            }
            catch (RepositorioException ex)
            {
                return RedirectToAction("AdminIndex", new { mensaje = ex.Message });
            }
            catch (Exception)
            {
                return RedirectToAction("AdminIndex", new { mensaje = "Hubo un error, contactese con el administrador." });
            }
        }
        [AdminAutorizado]
        [HttpPost]
        public IActionResult AdminEdit(int id, Administrador admin)
        {
            try
            {
                _editarAdministrador.Ejecutar(id, admin);
                return RedirectToAction("AdminIndex", new { mensaje = "Administrador modificado con exito." });
            }
            catch (DominioExcpetion ex)
            {
                ViewBag.mensaje = ex.Message;
            }
            catch (RepositorioException ex)
            {
                ViewBag.mensaje = ex.Message;
            }
            catch (Exception)
            {
                ViewBag.mensaje = "Hubo un error, contactese con el administrador.";
            }
            return View(admin);
        }
    }
}

***********************************
Archivo: Admin.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Filter\Admin.cs
***********************************
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc;

namespace WebApp.Filter
{
    public class Admin : Attribute, IAuthorizationFilter
    {
        public void OnAuthorization(AuthorizationFilterContext context)
        {

            if (context.HttpContext.Session.GetString("rol") != "Admin")
            {
                context.HttpContext.Session.Clear();
                context.Result = new RedirectResult("/Index/Login");
            }


        }
    }
}

***********************************
Archivo: AdminAutorizado.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Filter\AdminAutorizado.cs
***********************************
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc;

namespace WebApp.Filter
{
    public class AdminAutorizado : Attribute, IAuthorizationFilter
    {
        public void OnAuthorization(AuthorizationFilterContext context)
        {

            if (context.HttpContext.Session.GetString("super") != "True")
            {
                context.HttpContext.Session.Clear();
                context.Result = new RedirectResult("/Index/Login");
            }


        }
    }
}

***********************************
Archivo: ErrorViewModel.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Models\ErrorViewModel.cs
***********************************
namespace WebApp.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

***********************************
Archivo: VMAdministrador.cs
Carpeta: C:\Users\pc\Desktop\Libreria\WebApp\Models\VMAdministrador.cs
***********************************
namespace WebApp.Models
{
    public class VMAdministrador
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public bool ModificaUsuario { get; set; }

    }
}

***********************************
Archivo: ArticuloInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Articulo\ArticuloInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Articulo
{
    public class ArticuloInvalidoException : DominioExcpetion
    {
        public ArticuloInvalidoException() { }
        public ArticuloInvalidoException(string message) : base(message) { }
    }
}

***********************************
Archivo: CodigoInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Articulo\CodigoInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Articulo
{
    public class CodigoInvalidoException : ArticuloInvalidoException
    {
        public CodigoInvalidoException() : base("El codico no tiene el rango solicitado (13)") { }
    }
}

***********************************
Archivo: DescripcionInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Articulo\DescripcionInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Articulo
{
    public class DescripcionInvalidoException : ArticuloInvalidoException
    {
        public DescripcionInvalidoException() : base("La Descripcion no cumple con el largo (5)") { }
    }
}

***********************************
Archivo: NombreNoVacioException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Articulo\NombreNoVacioException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Articulo
{
    public class NombreNoVacioException : ArticuloInvalidoException
    {
        public NombreNoVacioException(): base("El nombre no tiene que estar vacio") { }
    }
}

***********************************
Archivo: PrecioDeVentaInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Articulo\PrecioDeVentaInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Articulo
{
    public class PrecioDeVentaInvalidoException:ArticuloInvalidoException
    {
        public PrecioDeVentaInvalidoException() : base("El precio debe ser un valor positivo.") { }
    }
}

***********************************
Archivo: StockInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Articulo\StockInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Articulo
{
    public class StockInvalidoException:ArticuloInvalidoException
    {
        public StockInvalidoException():base("El stock debe ser mayor a 0.") { }
    }
}

***********************************
Archivo: ArticuloDeMovimientoInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\MovimientoDeStock\ArticuloDeMovimientoInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.MovimientoDeStock
{
    public class ArticuloDeMovimientoInvalidoException:MovimientoDeStockInvalidoException
    {
        public ArticuloDeMovimientoInvalidoException() : base("El movimiento no se hizo sobre un articulo valido") { }

    }
}

***********************************
Archivo: CantidadInvalidaException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\MovimientoDeStock\CantidadInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.MovimientoDeStock
{
    public class CantidadInvalidaException:MovimientoDeStockInvalidoException
    {
        public CantidadInvalidaException() : base("La cantidad debe estar entre 1 y el tope") { }
    }
}

***********************************
Archivo: MovimientoDeStockInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\MovimientoDeStock\MovimientoDeStockInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.MovimientoDeStock
{
    public class MovimientoDeStockInvalidoException:DominioExcpetion
    {
            public MovimientoDeStockInvalidoException() { }
            public MovimientoDeStockInvalidoException(string message) : base("Movimiento invalido, debe completar todos los campos") { }

    }
}

***********************************
Archivo: RolUsuarioInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\MovimientoDeStock\RolUsuarioInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.MovimientoDeStock
{
    public class RolUsuarioInvalidoException:MovimientoDeStockInvalidoException
    {
        public RolUsuarioInvalidoException() : base("El ejecutor debe ser un encargado") { }

    }
}

***********************************
Archivo: TipoDeMovimientoInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\TipoDeMovimiento\TipoDeMovimientoInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.TipoDeMovimiento
{
    public class TipoDeMovimientoInvalidoException:DominioExcpetion
    {
            public TipoDeMovimientoInvalidoException() { }
            public TipoDeMovimientoInvalidoException(string message) : base("Tipo de movimiento invalido, asegurese de completar todos los campos") { }

    }
}

***********************************
Archivo: AdministradorInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Usuario\AdministradorInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Usuario
{
    internal class AdministradorInvalidoException:UsuarioInvalidoException
    {
        public AdministradorInvalidoException() : base("El valor recibido de Administrador, es inválido.") { }
    }
}

***********************************
Archivo: ApellidoInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Usuario\ApellidoInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Usuario
{
    public class ApellidoInvalidoException:UsuarioInvalidoException
    {
        public ApellidoInvalidoException() : base("El valor recibido de Apellido, es invalido.") { }
    }
}

***********************************
Archivo: EmailInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Usuario\EmailInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Usuario
{
    internal class EmailInvalidoException:UsuarioInvalidoException
    {
        public EmailInvalidoException() : base("El valor recibido de Email, es invalido.") { }
    }
}

***********************************
Archivo: NombreInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Usuario\NombreInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Usuario
{
    public class NombreInvalidoException:UsuarioInvalidoException
    {
        public NombreInvalidoException() : base("El valor recibido de Nombre, es invalido.") { }
    }
}

***********************************
Archivo: PasswordInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Usuario\PasswordInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Usuario
{
    public class PasswordInvalidoException:UsuarioInvalidoException
    {
        public PasswordInvalidoException() : base("El password recibido no cumple con las exigencias minimas de seguridad.") { }
    }
}

***********************************
Archivo: UsuarioInvalidoException.cs
Carpeta: C:\Users\pc\Desktop\Libreria\Libreria\Excepciones\Usuario\UsuarioInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaDeNegocio.Excepciones.Usuario
{
    public class UsuarioInvalidoException:DominioExcpetion
    {
        public UsuarioInvalidoException() { }
        public UsuarioInvalidoException(string message) : base(message) { }
    }
}

***********************************
Archivo: ArticuloConfiguration.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\Config\ArticuloConfiguration.cs
***********************************
using LogicaDeNegocio.Entidades;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection.Emit;

namespace LogicaAccesoDatos.EF.Config
{
    public class ArticuloConfiguration : IEntityTypeConfiguration<Articulo>
    {
        public void Configure(EntityTypeBuilder<Articulo> builder)
        {
            builder.Property(a => a.PrecioDeVenta).HasPrecision(8, 2);
        }
    }
}

***********************************
Archivo: TipoDeMovimientoConfiguration.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\Config\TipoDeMovimientoConfiguration.cs
***********************************
using LogicaDeNegocio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF.Config
{
    public class TipoDeMovimientoConfiguration : IEntityTypeConfiguration<TipoDeMovimiento>
    {
        public void Configure(EntityTypeBuilder<TipoDeMovimiento> builder)
        {
            builder.HasIndex(t => t.Nombre).IsUnique();
        }
    }
}

***********************************
Archivo: UsuarioConfiguration.cs
Carpeta: C:\Users\pc\Desktop\Libreria\LogicaAccesoDatos\EF\Config\UsuarioConfiguration.cs
***********************************
using LogicaDeNegocio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace LogicaAccesoDatos.EF.Config
{
    public class UsuarioConfiguration : IEntityTypeConfiguration<Usuario>
    {
        public void Configure(EntityTypeBuilder<Usuario> builder)
        {
            builder.HasIndex(u => u.Email).IsUnique();
        }
    }
}
